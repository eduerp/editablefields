<?php
// $Id: editablefields.module,v 1.3.2.17 2009/02/19 20:39:29 markfoodyburton Exp $

/**
 * @file
 * Editable fields module.
 */

/**
 * Implementation of hook_menu().
 */
function editablefields_menu() {
  global $user;
  $items = array();

  // Admin pages:
  $items['editablefields_html'] = array(
    'page callback' => 'editablefields_html',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'title' => 'ajax form',
    );
  $items['editablefields_submit'] = array(
    'page callback' => 'editablefields_submit',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'title' => 'ajax submit',
    );

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function editablefields_theme() {
  return array(
    'editablefields_formatter_editable' => array(
      'arguments' => array('element' => NULL),
      'function' => 'theme_editablefields_formatter_editable',
      ),
    'editablefields_formatter_clicktoedit' => array(
      'arguments' => array('element' => NULL),
      'function' => 'theme_editablefields_formatter_editable',
      ),
    'editablefields_formatter_addnidtohtml' => array( // ALAN added 20090728
      'arguments' => array('element' => NULL),
      'function' => 'theme_editablefields_formatter_addnidtohtml',
      ),
    );
}

/**
 * Implementation of hook_field_formatter_info().
 */
function editablefields_field_formatter_info() {
  return array(
    'editable' => array(
      'label' => t('Editable'),
      'field types' => array_keys(_content_field_types()),
      ),
    'clicktoedit' => array(
      'label' => t('Click to Edit'),
      'field types' => array_keys(_content_field_types()),
      ),
    'addnidtohtml' => array( // ALAN added 20090728
      'label' => t('Add Node ID as HTML ID for Field'),
      'field types' => array_keys(_content_field_types()),
      ),
    );
}

/**
 * Theme the editable field.
 */
function theme_editablefields_formatter_editable($element) {
  static $js_ready;

  $field_name = $element['#field_name'];
  $field = content_fields($field_name);
  $node = $element['#node'];
  $delta = $element['#item']['#delta'];


  if (content_handle('widget', 'multiple values', $field) == CONTENT_HANDLE_CORE) {
  }



  // See if access to this form element is restricted,
  // if so, skip widget processing and just set the value.
  if (!node_access('update',$node) || !content_access('edit', $field, NULL, $node)) { // ALAN added ", NULL, $node" 20090728
    // can't edit
    $formatter_name = 'default';
    if ($formatter = _content_get_formatter($formatter_name, $field['type'])) {
      $theme = $formatter['module'] .'_formatter_'. $formatter_name;
      return theme($theme, $element);
    }
  }
  else {
    $formatter_name = 'default';
    if ($formatter = _content_get_formatter($formatter_name, $field['type'])) {
      if (!isset($js_ready)) {
        $js_ready = TRUE;
        drupal_add_js('misc/jquery.form.js');
        drupal_add_js(drupal_get_path('module', 'editablefields') .'/editablefields.js');
        drupal_add_css(drupal_get_path('module', 'editablefields') .'/editablefields.css');

        $settings = array(
          'url_html' => url('editablefields_html', array('absolute' => TRUE)),
          'url_submit' => url('editablefields_submit', array('absolute' => TRUE)),
          'clicktoedit_message' => '<div class="editablefields_clicktoedit_message">'. t('[edit]') .'</div>',
        );
        drupal_add_js(array('editablefields' => $settings), 'setting');
      }
      $theme = $formatter['module'] .'_formatter_'. $formatter_name;
      $class="editablefields";
      if ($element['#formatter'] == 'clicktoedit') {
        $class .=" clicktoedit";
      }
      // CORE handling shoudl have a div on each,
      // MODULE handling should have a div surounding all elements (treat it as
      // one field) (So, we'll arrainge for the JS to remove the rest!)
      if (content_handle('widget', 'multiple values', $field) != CONTENT_HANDLE_CORE) {
        if ($delta!=0) {
          $class="editablefields editablefields_REMOVE";
        }
      }

      $pre='<div class="'. $class .'" nid="'. $node->nid .'" field="'. $field_name .'" delta="'. $delta .'">';
      $post='</div>';

      return $pre . theme($theme, $element) . $post;
    }
  }
}

/**
 * Theme the addnidtohtml field. ALAN added 20090728
 */
function theme_editablefields_formatter_addnidtohtml($element) {

  $field_name = $element['#field_name'];
  $field = content_fields($field_name);
  $node = $element['#node'];
  $delta = $element['#item']['#delta'];

  if (content_handle('widget', 'multiple values', $field) == CONTENT_HANDLE_CORE) {
  }

  $formatter_name = 'default';
  if ($formatter = _content_get_formatter($formatter_name, $field['type'])) {
    $theme = $formatter['module'] .'_formatter_'. $formatter_name;
    $pre = '<span id="idcomputed-' . $field_name . '-'. $node->nid . '">';
    $post = '</span>';
    return $pre . theme($theme, $element) . $post;
  }
}

/**
 * Implementation of hook_forms().
 */
function editablefields_forms() {
  $forms = array();
  $forms['editablefields_form'] = array(
    'callback' => 'editablefields_form_builder',
//    'callback arguments' => array('node', 'field_name'),
  );
  return $forms;
}

/**
 * Form builder callback.
 */
function editablefields_form_builder(&$form_state, $node, $field_name, $delta) {
  $field = content_fields($field_name);

  $form = array('#node' => $node);
//  $form_state = array('values' => array($field['field_name'] => $default_value));
  module_load_include('inc', 'content', 'includes/content.node_form');
  $form['#field_info'] = array($field['field_name'] => $field);
  $form = content_field_form($form, $form_state, $field, $delta);

  unset($form[$field_name]['#title']);
  if (is_array($form[$field_name][0]) && !is_array($form[$field_name][1])) {
    unset($form[$field_name][0]['#title']);
  }

  $form['#field_info'] = array($field['field_name'] => $field);
  return $form;
}

/**
 * Menu callback: ajax form.
 */
function editablefields_html() {
  $nid = arg(1);
  $field_name = arg(2);
  $delta=arg(3);
  $node = node_load($nid);

  if (node_access('update', $node)) {
    //  $html = _editablefields_create_form($node, $field_name);
    $html = drupal_get_form('editablefields_form', $node, $field_name, $delta);
    $object = new stdClass();
    $object->content = $html;
    // Register the JavaScript callback for this module.
    $object->__callbacks = array();
    // Allow other modules to extend the data returned.
    drupal_alter('ajax_data', $object, 'editablefields', $html);
    drupal_json($object);
  }
  else {
    drupal_not_found();
  }
  exit();
}

/**
 * Menu callback: ajax submit.
 */
function editablefields_submit() {
  $nid = $_POST['nid'];
  $field_name = $_POST['field'];
  $delta=$_POST['delta'];

  $node = node_load($nid);

  if (node_access('update', $node)) {

    if (!isset($_POST[$field_name])) {
      $_POST[$field_name] = array();
    }

    $form_state = array('values' => $_POST);

    if (is_array($node->{$field_name})) {
[[[
      // ALAN 201003307...
      // Determine if the value posted is in the allowed range for this course

      static $repeatbycinid = array(); // Cache

      $course_instance_nid = $node->field_course_instance[0]['nid'];
      if (!isset($repeatbycinid[$course_instance_nid])) {
        $sql = "SELECT field_repeat_value FROM {content_type_course_instance} WHERE nid={$course_instance_nid} LIMIT 1";
        $repeats = db_query($sql);
        $repeat = db_fetch_object($repeats);

        $repeatbycinid[$course_instance_nid]['repeat'] = $repeat->field_repeat_value;

        // Determine limits on grades
        $sql = "SELECT cgw.number_of_ca, cgw.max_mark_ca1, cgw.max_mark_ca2, cgw.max_mark_ca3, cgw.max_mark_ca4, cgw.max_mark_exam
          FROM {course_grade_weightings} cgw, {content_type_course_instance} ci
          WHERE
            (cgw.course_id=ci.field_course_id_nid OR cgw.course_id=0) AND
            ci.nid={$course_instance_nid}
          ORDER BY cgw.course_id DESC";  // Select the course specific one (if any) first followed by the default one
        $weightings = db_query($sql, $coursecode);
        $row = db_fetch_object($weightings);
        $repeatbycinid[$course_instance_nid]['number_of_ca']      = $row->number_of_ca;
        $repeatbycinid[$course_instance_nid]['cgw.max_mark_ca1']  = $row->cgw.max_mark_ca1;
        $repeatbycinid[$course_instance_nid]['cgw.max_mark_ca2']  = $row->cgw.max_mark_ca2;
        $repeatbycinid[$course_instance_nid]['cgw.max_mark_ca3']  = $row->cgw.max_mark_ca3;
        $repeatbycinid[$course_instance_nid]['cgw.max_mark_ca4']  = $row->cgw.max_mark_ca4;
        $repeatbycinid[$course_instance_nid]['cgw.max_mark_exam'] = $row->cgw.max_mark_exam;
      }

      if     ($form_state['values'][$field_name] == 'field_ca1') {
      }
      elseif ($form_state['values'][$field_name] == 'field_ca2') {
      }
      elseif ($form_state['values'][$field_name] == 'field_ca3') {
      }
      elseif ($form_state['values'][$field_name] == 'field_ca4') {
      }
      elseif ($form_state['values'][$field_name] == 'field_exam_score') {
      }




do check max_mark_ca1 against $form_state['values'][$field_name][0]['value']

number of ca use
and range = 100 for exam
and no CA


$message = "Continuous spelling Assesment1 mark must be between 0 and [max_mark_ca1] inclusive."
you are not allowed set CA1 for a repeat exam.


drupal_set_message($message, 'error');




      $err = drupal_get_messages();


        drupal_set_header('HTTP/1.1 404 Not Found');

        foreach ($err as $type=>$messages) {
          foreach ($messages as $message) {
            print $type .' : '. $message ."\n";
          }
        }
        exit();
      // END ALAN
]]]

      drupal_execute('editablefields_form', $form_state, $node, $field_name, $delta);

      $err=drupal_get_messages();
      if (count($err)>0) {
        drupal_set_header('HTTP/1.1 404 Not Found');
        // format the error message suitable for a popup window in simple text.
        foreach ($err as $type=>$messages) {
          foreach ($messages as $message) {
            print $type .' : '. $message ."\n";
          }
        }
        exit();
      }

      $field = content_fields($field_name);
      if (content_handle('widget', 'multiple values', $field) == CONTENT_HANDLE_CORE) {
        if ($node->{$field_name}[$delta]!=$form_state['values'][$field_name][0]) {
          $node->{$field_name}[$delta]=$form_state['values'][$field_name][0];
          node_save($node);
        }
      } else {
        if ($node->{$field_name}!=$form_state['values'][$field_name]) {
          $node->{$field_name}=$form_state['values'][$field_name];
          node_save($node);
        }
      }
      // ALAN 20090730...
      // Removed... // make sure sensible headers etc are sent...
      // Removed... drupal_set_header('Content-Type: text; charset=utf-8');

      require_once './' . drupal_get_path('module', 'veritas') . '/grading/computed.inc';

      $content = new stdClass();
      $content->totalscoreid = 'idcomputed-field_total_score-' . $node->nid;
      $content->totalscorevalue = grade_total($node->field_exam_score[0]['value'], $node->field_ca1[0]['value'], $node->field_ca2[0]['value'], $node->field_ca3[0]['value'], $node->field_ca4[0]['value'], $node->field_mat_no[0]['uid'], $node->field_course_instance[0]['nid'], $field_name);
      $content->gradeid = 'idcomputed-field_grade-' . $node->nid;
      $content->gradevalue = grade_grade($node->field_exam_score[0]['value'], $node->field_ca1[0]['value'], $node->field_ca2[0]['value'], $node->field_ca3[0]['value'], $node->field_ca4[0]['value'], $node->field_mat_no[0]['uid'], $node->field_course_instance[0]['nid'], $field_name);

      drupal_json($content);
      // END ALAN
    }
    else {
      drupal_set_header('HTTP/1.1 404 Not Found');
      print t('No field found, of name: %field', array('%field' => $field_name));
    }
  }
  else {
    drupal_set_header('HTTP/1.1 404 Not Found');
    print t('No write permissions for %field', array('%field' => $field_name));
  }
  exit();
}
