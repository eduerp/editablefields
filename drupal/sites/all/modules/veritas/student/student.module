<?php
function student_menu() {

  $items['student/new'] = array(
    'title' => 'JAMB/UME STUDENT REGISTRATION FORM',
    'page callback' => 'drupal_get_form',
    'page arguments'=>array('student_reg_form'),
    'access arguments' => array('student register'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['student/registration2'] = array(
   'title' => 'Student Registration',
   'page callback' => 'drupal_get_form',
   'page arguments' => array('student_registration_form'),
   'access arguments' => array('student admit'),
   'type' => MENU_NORMAL_ITEM,
  );
  $items['studentreg/login'] = array(
  'page callback' => 'drupal_get_form',
  'page arguments' => array('register_student_login_form'),
  'access arguments' => array('student login'),
  'type' => MENU_CALLBACK,
  );
  /*$items['logout'] = array(
   'page callback' => 'drupal_get_form',
   'page arguments' => array('register_student_logout'),
   'access arguments' => array('student admit'),
   'type' => MENU_CALLBACK,
  );*/
  $items['student/course'] = array(
   'page callback' => 'drupal_get_form',
   'page arguments' => array('student_course_form'),
   'access arguments' => array('student course'),
   'type' => MENU_CALLBACK,
  );

 /*$items['student/changepassword']=array(
 'page callback' => 'drupal_get_form',
 'page arguments'=>array('student_change_password_form'),
  'access arguments' => array('student register'),
    'type' => MENU_CALLBACK,
 );*/

  $items['student/ajaxlga'] = array(
    'page callback' => '_student_add_lga',
    'access arguments' => array('student register'),
    'type' => MENU_CALLBACK,
  );

  $items['student/resgistercourses'] = array(
    'title' => 'Register Courses',
    'page callback' => 'student_courses',
    'access arguments' => array('student registercourse'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['student/sign_in'] = array(
    'title' => 'Student Login',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('student_login_form'),
    'access arguments' => array('student register'),
    'type' => MENU_CALLBACK,
  );

  $items['student/accomodation'] = array(
    'page callback' => '_student_accomodation_validate',
    'access arguments' => array('student register'),
    'type' => MENU_CALLBACK,
  );

  $items['student/religions'] = array(
    'page callback' => '_student_get_subrel',
    'access arguments' => array('student register'),
    'type' => MENU_CALLBACK,
  );

  $items['student/ajaxdep'] = array(
    'page callback' => '_student_add_dep',
    'access arguments' => array('student register'),
    'type' => MENU_CALLBACK,
  );

  $items['changepassword/success'] = array(
    'page callback' => 'change_pasword_success',
    'access arguments' => array('student register'),
    'type' => MENU_CALLBACK,
 );

 $items['student/ajaxcourse'] = array(
  'page callback' => '_student_add_course',
    'access arguments' => array('student register'),
    'type' => MENU_CALLBACK,
 );

  return $items;
}

function register_student_logout() {
  unset($_SESSION['student']);
  drupal_goto('user');
}

function student_perm() {
  return array('student register', 'student registercourse', 'student admit', 'student course');
}

function change_pasword_success(&$obj) {
  ob_start();
  echo "Password Changed successfully";
  return ob_get_clean();
}
function student_change_password_form(&$obj) {
   $form['#title'] = t('Change Password');
   $form['oldpassword'] = array(
     '#title' => 'Old Password',
     '#type' => 'password',
     '#size' => 20,
     '#required' => TRUE
   );
   $form['newpassword'] = array(
      '#type' => 'password',
      '#title' => 'New Password',
      '#size' => '30',
      '#required' => TRUE
   );
   $form['confirmpassword'] = array(
     '#type' => 'password',
     '#title' => 'Confirm Password',
     '#size' => '30',
     '#required' => TRUE
   );
   $form['submit']=array('#value' => 'Submit', '#type' => 'submit');
   return $form;
}

function student_change_password_form_submit($form, &$states) {
  $query = "update {admitted_student} set pwd = '%s' where student_id='%s'";
  db_query($query, $form['#post']['newpassword'], $_SESSION['student']['data']->student_id);
  drupal_goto('changepassword/success');
}

function student_change_password_form_validate($form, &$states) {

  if ($form['#post']['newpassword'] != $form['#post']['confirmpassword']) {
    form_set_error('submitted[confirmpassword]', "Password not match with  Confirm Password");
  }
  if ($_SESSION['student']['data']->pwd != $form['#post']['oldpassword'] ) {
    form_set_error('submitted[oldpassword]', "Old Password not correct");
  }
}

function register_student_login_form(&$obj) {
  unset($_SESSION['student']);
  $form['#title'] = t('Student Login');
  $form['matriculation_no'] = array(
    '#title' => 'Matriculation No.',
    '#type' => 'textfield',
    '#size' => 20,
    '#required'=> TRUE
   );
   $form['password'] = array(
     '#type' => 'password',
     '#title' => 'Password',
     '#size' => '30',
     '#description' => 'Password is DOB and in format YYYY-mm-dd '
    );
   $form['submit'] = array('#value' => 'Login', '#type' => 'submit');
   return $form;
}

function register_student_login_form_validate($form, &$states) {
  $query = "select * from {admitted_student} where matriculation_no = '". $form['#post']['matriculation_no'] ."' and clearance_status = 1";
  $result = db_query($query);
  if ($data = db_fetch_object($result)) {
    if ($form['#post']['password'] == $data->pwd) {
       $_SESSION['student']['id'] = $data->student_id;
       $_SESSION['student']['data'] = $data;
    }
    else {
       form_set_error('submitted[passoword]', "Password is not correct");
    }

  }
  else {
    form_set_error('submitted[matriculation_no]', "Matriculation number not valid");
  }
}

function register_student_login_form_submit(&$obj) {
  drupal_goto('student/course');
}

function student_course_form(&$obj) {

  if (!isset($_SESSION['student']['data']->student_id)) {
    drupal_goto('user');
  }
  if (!$obj['storage']['step'])
    $obj['storage']['step'] = 1;
  $st = $obj['storage']['step'];
  if ($st == 1) {
    return student_course_form1($obj);
  }
  elseif ($st == 2) {
    return student_course_form2($obj);
  }
}

function student_courses() {

  if (!isset($_SESSION['student']['data']->student_id)) {
    drupal_goto('user');
  }
  $query = "select distinct c.* from {registered_course} rc inner join {registrable_course} rac on rac.reg_course_id = rc.registered_course_id inner join {course} c on rac.course_id= c.course_id";
   $result = db_query($query);
   $html = "<table border='1'>";
   while ($row = db_fetch_object($result)) {
     $html .= "<tr>
       <th>". $row->course_code ."</th>
        <td>Lecturer Name</td>
        </tr>";
    }
    $html .= "</table>";
    return $html;
}

function student_course_form1(&$obj) {
   $query = "select * from {admitted_student} where student_id='". $_SESSION['student']['id'] ."'";
   $result = db_query($query);
   $row =  db_fetch_object($result);
   $query = "SELECT   *  from  {registrable_course} rc where rc.level_id = ". $row->level_id ."  and rc.programme_id=". $row->first_choice ;
   $result = db_query($query);
   $min_max_credits = db_fetch_object($result);
   $query = "SELECT   *  from {course} c inner join {registrable_course} rc on rc.course_id = c.course_id where rc.level_id = ". $row->level_id ."  and rc.programme_id=". $row->first_choice ;
   $result = db_query($query);
   $rows = array();
   $core_html = "<tr>
       <th>
        Course Code
       </th>
       <th>
        Course Title
       </th>
       <th>
        Course Description
       </th>
       <th>
        Semester
       </th>
       <th>
        Credit Load
       </th>
      </tr>";

   $elective_html = "<tr>
        <th>

       </th>
       <th>
        Course Code
       </th>
       <th>
        Course Title
       </th>
       <th>

        Course Description
       </th>
       <th>
        Semester
       </th>
       <th>
        Credit Load
       </th>
      </tr>";
   while ($row = db_fetch_object($result)) {
      if ($row->course_type == 1) {
         $core_html .= '<tr>
       <td>
        '.$row->course_code.'
       </td>
       <td>
        '.$row->course_title.'
       </td>
       <td>
        '.$row->course_description.'
       </td>
       <td>
        '.$row->semester.'
       </td>
       <td>
        '.$row->credit_load.'
       </td>
      </tr>';
        $form['courses']['corecourses['.$row->reg_course_id.']'] = array('#type' => 'hidden', '#value' => $row->reg_course_id);
        $selected_load += $row->credit_load;
      }
      else {

        $elective_html .= ' <tr>
        <td>
        <input class="select_course" type="checkbox" name="electivecourses['. $row->reg_course_id .']" value='. $row->credit_load .' />
       </td>
                      <td>
        '. $row->course_code .'
       </td>
       <td>
        '. $row->course_title .'
       </td>
       <td>
        '. $row->course_description .'
       </td>
       <td>
        '. $row->semester .'
       </td>
       <td>
        '. $row->credit_load  .'
       </td>
       </tr>
       ';
    }
  $rows[$row->course_id] = $row->course_title;
  }
   $credit_counter_html = '<tr><th colspan="2">CREDIT LOAD COUNTER</th></tr>';
   $credit_counter_html .= '<tr><th>Maximum Credit Load</th><td>'. $min_max_credits->max_credit_load .'</td></tr>';
   $credit_counter_html .= '<tr><th>Minimum Credit Load</th><td>'. $min_max_credits->min_credit_load .'</td></tr>';
   $credit_counter_html .= '<tr><th>Selected Credit Load</th><td><span id="selected_load">'. $selected_load .'</span></td></tr>';
   $form['courses']['max_load'] = array('#type'=>'hidden', '#value'=>$min_max_credits->max_credit_load);
   $form['courses']['min_load'] = array('#type'=>'hidden', '#value'=>$min_max_credits->min_credit_load);
   $form['courses']['select_credit'] = array('#type'=>'hidden', '#value'=>$selected_load);
   $script = '
    var counter = '. $selected_load .' ;
   $(function(){
   $(".select_course").click(function(){
   counter = parseInt($("#selected_load").text());
   if(this.checked == true){
       counter += parseInt($(this).val());
    $("#selected_load").text(counter);
   } else {
      counter -= parseInt($(this).val());
    $("#selected_load").text(counter);
   }
   $("#edit-select-credit-1").val(counter);
   });
   });
  ';
  drupal_add_js($script,'inline','header', FALSE, FALSE);
  $form['courses']['core'] = array('#type' => 'item', '#value' => $core_html, "#prefix" => '<table border="1">' , "#suffix" => '</table>');
  $form['courses']['elective'] = array('#type' => 'item', '#value' => $elective_html, "#prefix" => '<table border="1">' , "#suffix" => '</table>');
  $form['courses']['loadcounter'] = array('#type' => 'item', '#value' => $credit_counter_html, "#prefix" => '<table border="1">' , "#suffix" => '</table>');
  $form['courses']['submit'] = array('#id'=>'edit-next' , '#type'=>"submit" , '#value'=>'Submit');
  return $form;
}

function student_course_form2(&$obj) {
  $query = "select * from {admitted_student} where student_id='". $_SESSION['student']['id'] ."'";
  $result = db_query($query);
  $row =  db_fetch_object($result);
  $query = "select * from {course} where prog_id=". $row->first_choice ." and level_level_id = ". $row->level_id;
  $query ="SELECT   *  from  registrable_course rc where rc.level_id = ". $row->level_id ."  and rc.programme_id=". $row->first_choice ;
  $result = db_query($query);
  $min_max_credits = db_fetch_object($result);
  $query = "SELECT   *  from {course} c inner join {registrable_course} rc on rc.course_id = c.course_id where rc.level_id = ". $row->level_id ."  and rc.programme_id=". $row->first_choice ;
  $result = db_query($query);
  $rows = array();
  $core_html = "<tr>
       <th>
        Course Code
       </th>
       <th>
        Course Title
       </th>
       <th>
        Course Description
       </th>
       <th>
        Semester
       </th>
       <th>
        Credit Load
       </th>
      </tr>";
  $elective_html = "<tr>
        <th>

       </th>
       <th>
        Course Code
       </th>
       <th>
        Course Title
       </th>
       <th>
        Course Description
       </th>
       <th>
        Semester
       </th>
       <th>
        Credit Load
       </th>
      </tr>";
  $elective_course = array_keys($obj['storage'][1]['electivecourse']);

  while ($row = db_fetch_object($result)) {
    if ($row->course_type == 1) {
      $core_html .= '<tr>
       <td>
        '. $row->course_code .'
       </td>
       <td>
        '. $row->course_title .'
       </td>
       <td>
        '. $row->course_description .'
       </td>
       <td>
        '. $row->semester .'
       </td>
       <td>
        '. $row->credit_load .'
       </td>
       </tr>';
      $form['courses']['corecourses['.$row->reg_course_id.']'] = array('#type'=>'hidden', '#value'=>$row->reg_course_id);
      $selected_load += $row->credit_load;
    }
    else {
      if (in_array($row->reg_course_id,$elective_course)) {
        $checked = "checked";
        $selected_load += $row->credit_load;
    }
    else {
      $checked = '';
    }
    $elective_html .= ' <tr>
       <td>
       <input class="select_course" readonly type="checkbox" '.$checked.' name="electivecourses['. $row->reg_course_id .']" value='. $row->credit_load .' />
       </td>
       <td>
        '. $row->course_code .'
       </td>
       <td>
        '. $row->course_title .'
       </td>
       <td>
        '. $row->course_description .'
       </td>
       <td>
        '. $row->semester .'
       </td>
       <td>
        '. $row->credit_load .'
       </td>
       </tr>
       ';
    }
    $rows[$row->course_id] = $row->course_title;
  }

  $credit_counter_html = '<tr><th colspan="2">CREDIT LOAD COUNTER</th></tr>';
  $credit_counter_html .= '<tr><th>Maximum Credit Load</th><td>'. $min_max_credits->max_credit_load .'</td></tr>';
  $credit_counter_html .= '<tr><th>Minimum Credit Load</th><td>'. $min_max_credits->min_credit_load .'</td></tr>';
  $credit_counter_html .= '<tr><th>Selected Credit Load</th><td><span id="selected_load">'. $selected_load .'</span></td></tr>';
  $form['courses']['max_load'] = array('#type'=>'hidden', '#value'=>$min_max_credits->max_credit_load);
  $form['courses']['min_load'] = array('#type'=>'hidden', '#value'=>$min_max_credits->min_credit_load);
  $form['courses']['select_credit'] = array('#type'=>'hidden', '#value'=>$selected_load);
  $script = '
    var counter = '. $selected_load .' ;
  $(function(){
  $(".select_course").click(function(){

    counter = parseInt($("#selected_load").text());
   if(this.checked == true){
       counter += parseInt($(this).val());
    $("#selected_load").text(counter);
   } else {
      counter -= parseInt($(this).val());
    $("#selected_load").text(counter);
   }

   $("#edit-select-credit").val(counter);


  });
 });
 ';
  drupal_add_js($script,'inline','header');
  $form['courses']['core'] = array('#type' => 'item', '#value' => $core_html,"#prefix" => '<table border="1">' , "#suffix" => '</table>');
  $form['courses']['elective'] = array('#type'=>'item', '#value' => $elective_html,"#prefix" => '<table border="1">' , "#suffix" => '</table>');
  $form['courses']['loadcounter'] = array('#type' => 'item', '#value' => $credit_counter_html, "#prefix" => '<table border="1">', "#suffix" => '</table>');
  $form['coursep']=array('#id' => 'edit-previous', '#value' => 'Previous', '#type' => 'submit');
  $form['coursen']=array('#id' => 'edit-next', '#value' => 'Next', '#type' => 'submit');
  return $form;
}

function student_course_form_submit($form,&$state){
  $values = $state['values'];

  $elective=$state['clicked_button']['#post']['electivecourses'];

  if ($state['storage']['step'] == 1) {

    $state['storage'][1] = $state['values'];
    $state['storage'][1]['electivecourse'] = $elective;
  }
  if($state['storage']['step'] == 2){
     add_student_courses($state['clicked_button']['#post']);
     drupal_goto("student/resgistercourses");
  }
  if ($state['clicked_button']['#id'] == 'edit-previous') {
      $state['storage']['step']--;
      return;
  }
  elseif ($state['clicked_button']['#id'] == 'edit-next') {
     $state['storage']['values'][$state['storage']['step']] = $state['values'];
     $state['#rebuild'] = TRUE;
     $state['storage']['step']++;
    return;
   }
   else
    return;
}

function add_student_courses($data) {

  $query = "select * from {admitted_student} where student_id='". $_SESSION['student']['id'] ."'";
  $result = db_query($query);
  $row =  db_fetch_object($result);
  $query = "delete from  {registered_course} where student_id". $_SESSION['student']['id'];
  $result = db_query($query);

  // ALAN, BUG (temporarily set to 1), I had $row->semester_id, but no semester is passed (and it would be c.semester not rc.semester_id in any case)
  delete_student_grades($row->user_id, $row->session_id, 1); // ALAN 20090805 (Delete, for this Semester only!)

  foreach ($data['corecourses'] as $key => $value ) {
    $query = "insert registered_course set {registered_course_id} = ". $value ." ,  student_id=". $_SESSION['student']['id'] ." , session_id=". $row->session_id ;
    db_query($query);
    create_cck_records($row, $value, $data); // ALAN 20090804
  }
  foreach($data['electivecourses'] as $key => $value ) {
    $query = "insert {registered_course} set registered_course_id = ". $key ." ,  student_id=". $_SESSION['student']['id'] ." , session_id=". $row->session_id ;
    db_query($query);
    create_cck_records($row, $key, $data);   // ALAN 20090804
  }
}


// ALAN 20090804

function create_cck_records($admitted_student, $reg_course_id, $data) {

  if (empty($admitted_student->middle_name)) {
    $studentname = $admitted_student->last_name . ', ' . $admitted_student->first_name;
  }
  else {
    $studentname = $admitted_student->last_name . ', ' . $admitted_student->first_name . ' ' . $admitted_student->middle_name;
  }

  // Get details of the course's programme, department, college
  $query = "SELECT
    p.programme_id,
    p.programme_name,
    p.department_id,
    c.course_id,
    c.course_code,
    c.course_title,
    c.credit_load,
    c.semester AS semester_id,
    d.department_name,
    d.college_id,
    co.college_name,
    co.college_abbreviation,
    s.session_id,
    s.sess_name,
    l.level_id,
    l.level_name,
    vs.user_id
  FROM {registrable_course} rc, {programme} p, {course} c, {college} co, {department} d, {session} s, {level} l, {veritas_staff} vs
  WHERE
    rc.reg_course_id={$reg_course_id} AND
    rc.programme_id=p.programme_id AND
    rc.course_id=c.course_id AND
    p.department_id=d.department_id AND
    d.college_id=co.college_id AND
    s.session_id={$admitted_student->session_id} AND
    rc.level_id=l.level_id AND
    rc.lecturer_id=vs.staff_id";
  $program_result = db_query($query);
  $program_row = db_fetch_object($program_result);

  // Get details of the student's home programme, department, college (as opposed to the course's)
  $query = "SELECT
    p.programme_id,
    p.programme_name,
    p.department_id,
    d.department_name,
    d.college_id,
    co.college_name,
    co.college_abbreviation,
    l.level_name
  FROM {programme} p, {department} d, {college} co, {level} l
  WHERE
    p.programme_id={$admitted_student->first_choice} AND
    p.department_id=d.department_id AND
    d.college_id=co.college_id AND
    l.level_id={$admitted_student->level_id}";
  $home_program_result = db_query($query);
  $home_program_row = db_fetch_object($home_program_result);

  $program = get_cck_nid('program', 'field_program_id', $program_row->programme_id, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
  if (empty($program)) {
    // program CCK
    $node = new stdClass();
    $node->type                                    = 'program';
    $node->uid                                     = 1;  // Admin
    $node->status                                  = 1;  // Published
    $node->promote                                 = 0;
    $node->sticky                                  = 0;
    $node->comment                                 = 2;  // Read/Write
    $node->title                                   = $program_row->programme_name;
    $node->field_programme_id[0]['value']          = $program_row->programme_id;
    $node->field_programme_name[0]['value']        = $program_row->programme_name;
    $node->field_department_id[0]['value']         = $program_row->department_id;
    $node->field_department_name[0]['value']       = $program_row->department_name;
    $node->field_college_id                        = $program_row->college_id;
    $node->field_college_name                      = $program_row->college_name;
    $node->field_college_abbreviation              = $program_row->college_abbreviation;
    node_save($node);
    $program = $node->nid;
  }

  $home_program = get_cck_nid('program', 'field_program_id', $home_program_row->programme_id, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
  if (empty($home_program)) {
    // program CCK
    $node = new stdClass();
    $node->type                                    = 'program';
    $node->uid                                     = 1;  // Admin
    $node->status                                  = 1;  // Published
    $node->promote                                 = 0;
    $node->sticky                                  = 0;
    $node->comment                                 = 2;  // Read/Write
    $node->title                                   = $home_program_row->programme_name;
    $node->field_programme_id[0]['value']          = $home_program_row->programme_id;
    $node->field_programme_name[0]['value']        = $home_program_row->programme_name;
    $node->field_department_id[0]['value']         = $home_program_row->department_id;
    $node->field_department_name[0]['value']       = $home_program_row->department_name;
    $node->field_college_id                        = $home_program_row->college_id;
    $node->field_college_name                      = $home_program_row->college_name;
    $node->field_college_abbreviation              = $home_program_row->college_abbreviation;
    node_save($node);
    $home_program = $node->nid;
  }

  $course_instance = get_cck_nid('course_instance', 'field_course_id', $program_row->course_id, 'field_session_id', $program_row->session_id, 'field_semester_id', $program_row->semester_id, 'field_level_id', $program_row->level_id, NULL, NULL, NULL, NULL);
  if (empty($course_instance)) {
    // course_instance CCK
    $node = new stdClass();
    $node->type                                    = 'course_instance';
    $node->uid                                     = 1;  // Admin
    $node->status                                  = 1;  // Published
    $node->promote                                 = 0;
    $node->sticky                                  = 0;
    $node->comment                                 = 2;  // Read/Write
    $node->title                                   = $program_row->course_title . ' - ' . $program_row->sess_name . ' - ' . $program_row->semester_id . ' - ' . $program_row->level_name;
    $node->field_course_id[0]['value']             = $program_row->course_id;
    $node->field_course_code[0]['value']           = $program_row->course_code;
    $node->field_course_title[0]['value']          = $program_row->course_title;
    $node->field_program_ref_course[0]['nid']      = $program;
    $node->field_credit_load[0]['value']           = $program_row->credit_load;
    $node->field_lecturer[0]['uid']                = $program_row->user_id;
    $node->field_session_id[0]['value']            = $program_row->session_id;
    $node->field_sess_name[0]['value']             = $program_row->sess_name;
    $node->field_semester_id[0]['value']           = $program_row->semester_id;
    $node->field_semester_name[0]['value']         = $program_row->semester_id;
    $node->field_level_id[0]['value']              = $program_row->level_id;
    $node->field_level_name[0]['value']            = $program_row->level_name;
    node_save($node);
    $course_instance = $node->nid;
  }

  $student_gpa = get_cck_nid('student_gpa', 'field_session_id_gpa', $program_row->session_id, 'field_semester_id_gpa', $program_row->semester_id, 'field_level_id_gpa', $home_program_row->level_id, NULL, NULL, NULL, NULL, 'field_student_ref_gpa', $admitted_student->user_id);
  if (empty($student_gpa)) {
    // student_gpa CCK
    $node = new stdClass();
    $node->type                                    = 'student_gpa';
    $node->uid                                     = 1;  // Admin
    $node->status                                  = 1;  // Published
    $node->promote                                 = 0;
    $node->sticky                                  = 0;
    $node->comment                                 = 2;  // Read/Write
    $node->title                                   = $studentname . ' - ' . $program_row->sess_name . ' - ' . $program_row->semester_id;
    $node->field_student_ref_gpa[0]['uid']         = $admitted_student->user_id;
    $node->field_program_ref_gpa[0]['nid']         = $home_program; // No longer GPA for Program but for whole semester's courses
    $node->field_gpa[0]['value']                   = '-';
    $node->field_gpaforstudent[0]['value']         = '-';
    $node->field_cgpa[0]['value']                  = '-';
    $node->field_cgpaforstudent[0]['value']        = '-';
    $node->field_credit_load_registered[0]['value']= $data['select_credit']; // For Veritas all the selected credit applies to this one Semester.
    $node->field_credit_load_completed[0]['value'] = 0;
    $node->field_session_id_gpa[0]['value']        = $program_row->session_id;
    $node->field_sess_name_gpa[0]['value']         = $program_row->sess_name;
    $node->field_semester_id_gpa[0]['value']       = $program_row->semester_id;
    $node->field_semester_name_gpa[0]['value']     = $program_row->semester_id;
    $node->field_level_id_gpa[0]['value']          = $home_program_row->level_id;
    $node->field_level_name_gpa[0]['value']        = $home_program_row->level_name;
    node_save($node);
  }

  // Will never exist, because previously deleted.
  // $student_grades = get_cck_nid('student_grades', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'field_course_instance', $course_instance, 'field_mat_no', $admitted_student->user_id);
  // if (empty($student_grades)) {
    // student_grades CCK
    $node = new stdClass();
    $node->type                                    = 'student_grades';
    $node->uid                                     = 1;  // Admin
    $node->status                                  = 1;  // Published
    $node->promote                                 = 0;
    $node->sticky                                  = 0;
    $node->comment                                 = 2;  // Read/Write
    $node->title                                   = $studentname;
    $node->field_mat_no[0]['uid']                  = $admitted_student->user_id;
    $node->field_course_instance[0]['nid']         = $course_instance;
    $node->field_student_gpa[0]['nid']             = $student_gpa;
    $node->field_ca1[0]['value']                   = 0;
    $node->field_ca1forstudent[0]['value']         = 0;
    $node->field_ca1locked[0]['value']             = 0;
    $node->field_ca2[0]['value']                   = 0;
    $node->field_ca2forstudent[0]['value']         = 0;
    $node->field_ca2locked[0]['value']             = 0;
    $node->field_ca3[0]['value']                   = 0;
    $node->field_ca3forstudent[0]['value']         = 0;
    $node->field_ca3locked[0]['value']             = 0;
    $node->field_ca4[0]['value']                   = 0;
    $node->field_ca4forstudent[0]['value']         = 0;
    $node->field_ca4locked[0]['value']             = 0;
    $node->field_exam_score[0]['value']            = 0;
    $node->field_examscoreforstudent[0]['value']   = 0;
    $node->field_examscorelocked[0]['value']       = 0;
    $node->field_total_score[0]['value']           = '-'; // Computed, probably should not be set here, will be computed on save
    $node->field_totalscoreforstudent[0]['value']  = '-';
    $node->field_grade[0]['value']                 = '-'; // Computed, probably should not be set here, will be computed on save
    $node->field_gradeforstudent[0]['value']       = '-';
    $node->field_gradepoint[0]['value']            = '-'; // Computed, probably should not be set here, will be computed on save
    $node->field_gradepointforstudent[0]['value']  = '-';
    node_save($node);
  // }
}


function get_cck_nid($ccktype, $fieldname1, $value1, $fieldname2, $value2, $fieldname3, $value3, $fieldname4, $value4, $fieldnamenid, $nid, $fieldnameuid, $uid) {
  $where = '';
  if (isset($fieldname1)) {
    $field = content_database_info(content_fields($fieldname1, $ccktype));
    $table1 = $field['table'];
    $where .= ' AND t1.' . $field['columns']['value']['column'] . "='$value1'";
  }
  if (isset($fieldname2)) {
    $field = content_database_info(content_fields($fieldname2, $ccktype));
    $table1 = $field['table'];
    $where .= ' AND t1.' . $field['columns']['value']['column'] . "='$value2'";
  }
  if (isset($fieldname3)) {
    $field = content_database_info(content_fields($fieldname3, $ccktype));
    $table1 = $field['table'];
    $where .= ' AND t1.' . $field['columns']['value']['column'] . "='$value3'";
  }
  if (isset($fieldname4)) {
    $field = content_database_info(content_fields($fieldname4, $ccktype));
    $table1 = $field['table'];
    $where .= ' AND t1.' . $field['columns']['value']['column'] . "='$value4'";
  }

  if (isset($fieldnamenid)) {
    $field = content_database_info(content_fields($fieldnamenid, $ccktype));
    $table1 = $field['table'];
    $where .= ' AND t1.' . $field['columns']['nid']['column'] . "=$nid";
  }
  if (isset($fieldnameuid)) {
    $field = content_database_info(content_fields($fieldnameuid, $ccktype));
    $table1 = $field['table'];
    $where .= ' AND t1.' . $field['columns']['uid']['column'] . "=$uid";
  }

  // Assumption made that all fields are in main CCK table.

  $sql = "SELECT n.nid FROM {node} n, {{$table1}} t1 WHERE n.nid=t1.nid AND n.vid=t1.vid $where";
  // These queries are potentially cumulatively slow, they should be cached and/or DB indices added on relevant columns

  $result = db_query($sql);
  $row = db_fetch_object($result);
  if (!empty($row->nid)) return $row->nid;
  return NULL;
}


function delete_student_grades($uid, $session_id, $semester_id) {
  $field = content_database_info(content_fields('field_session_id', 'course_instance'));
  $table_course_instance = $field['table'];
  $where = 'ci.' . $field['columns']['value']['column'] . "='$session_id'";

  $field = content_database_info(content_fields('field_semester_id', 'course_instance'));
  $where .= ' AND ci.' . $field['columns']['value']['column'] . "='$semester_id'";

  $field = content_database_info(content_fields('field_course_instance', 'student_grades'));
  $table_student_grades = $field['table'];
  $where .= ' AND sg.' . $field['columns']['nid']['column'] . "=ci.nid";

  $field = content_database_info(content_fields('field_mat_no', 'student_grades'));
  $where .= ' AND sg.' . $field['columns']['uid']['column'] . "=$uid";

  $sql = "SELECT sg.nid FROM {{$table_course_instance}} ci, {{$table_student_grades}} sg WHERE $where";
  // Query is potentially slow, can add DB indices added on relevant columns

  $result = db_query($sql);

  while ($row = db_fetch_object($result)) {
    // Copied from node_delete(), but want to bypass access control.
    $node = node_load($row->nid);

    db_query('DELETE FROM {node} WHERE nid = %d', $node->nid);
    db_query('DELETE FROM {node_revisions} WHERE nid = %d', $node->nid);

    // Call the node-specific callback (if any):
    node_invoke($node, 'delete');
    node_invoke_nodeapi($node, 'delete');

    // Clear the page and block caches.
    cache_clear_all();

    // Remove this node from the search index if needed.
    if (function_exists('search_wipe')) {
      search_wipe($node->nid, 'node');
    }
  }
}
// END ALAN


function student_course_form_validate($form, &$states) {
 $values = $states['values'];
  if ($state['storage']['step'] == 1) {
    if ($values['select_credit'] < $values['min_load'] || $values['select_credit'] > $values['max_load'] ) {
      form_set_error('submitted[courses]', "Specify Proper Credit Load");
      return;
    }
  }
}

function student_login_form(&$obj){
  $form['#title'] = t('Student Login');
  $form['jamb_no'] = array(
    '#title' => 'JAMB NO',
    '#type' => 'textfield',
    '#size' => 20,
    '#required' => TRUE
  );
  $form['dob'] = array(
    '#type' => 'date',
    '#title' => 'Date Of Birth'
  );
  $form['submit'] = array(
    '#value' => 'Login',
    '#type' => 'submit'
  );
  return $form;
}

function student_login_form_submit(&$obj) {
  drupal_goto('student/registration2');
}

function student_registration_form(&$obj) {
  if (!isset($_SESSION['student']['data']->student_id)) {
    drupal_goto('student/login');
  }
  $query = "select * from {admitted_transaction} where student_id='". $_SESSION['student']['id'] ."'";
  $result = db_query($query);
  if (db_fetch_array($result)) {
    $query = "select * from {admitted_student} where student_id='". $_SESSION['student']['id'] ."'";
    $result = db_query($query);
    $row =  db_fetch_object($result);
    if ($row->clearance_status == '1') {
      drupal_goto('student/course');
    }
    else {
      $obj['storage']['step'] = 7;
    }
  }
  if (!$obj['storage']['step'])
    $obj['storage']['step'] = 1;
  $st = $obj['storage']['step'];
  if ($st == 1) {
   //return _student_reg_form6($obj);
   //return _student_reg_form5($obj);
    return _student_registration_form1($obj);
  }
  else if ($st == 2)
    return _student_registration_form2($obj);
  else if ($st == 3)
    return _student_registration_form3($obj);
  else if ($st == 4)
    return _student_registration_form4($obj);
  else if ($st == 5)
    return _student_registration_form5($obj);
  else if($st == 6)
    return _student_registration_form6($obj);
  else if($st == 7)
    return _student_registration_form7($obj);
}

function _student_registration_form1(&$obj) {

  $modes = _student_mode_of_entries();
  $modes = array_flip($modes);
  $form['#title'] = t('Personal Information');
  $form['course1'] = array(
    '#type' => 'select',
    '#default_value' => $_SESSION['student']['data']->first_choice,
    '#options' => _student_prg(),
    '#title' => 'Course',
    '#prefix' => '<div id="div-id-co1">',
    '#suffix' => '</div>',
    '#attributes' => array('disabled' => 'disabled')
  );
  $form['mode'] = array(
    '#type' => 'select',
    '#options' => _student_mode_of_entries()/*array('UME'=>'UME','DE'=>'DE','MEX'=>'MEX')*/,
    '#title' => 'Mode Of Entry',
    '#default_value' => $modes[$_SESSION['student']['data']->mode_of_entry]
  );
  $form['jam'] = array(
    '#title' => 'JAMB NO',
    '#type' => 'textfield',
    '#size' =>20,
    '#required' => TRUE,
    '#default_value' => $_SESSION['student']['data']->jambno
  );
  $form['title'] = array(
    '#type' => 'select',
    '#options' => _veritas_titles() /*array('Mr'=>'Mr','Ms'=>'Ms','Mrs'=>'Mrs')*/,
    '#required' => TRUE,
    '#title' => 'Title',
    '#default_value' => $_SESSION['student']['data']->title
  );
  $form['lname'] = array(
    '#title' => 'Surname',
    '#type' => 'textfield',
    '#size' => 20,
    '#required' => TRUE,
    '#default_value' => $_SESSION['student']['data']->last_name
  );
  $form['fname'] = array(
    '#title' => 'First Name',
    '#type' => 'textfield',
    '#size' => 20,
    '#required' => TRUE,
    '#default_value' => $_SESSION['student']['data']->first_name
  );
  $form['mname'] = array(
    '#title' => 'Middle Name',
    '#type' => 'textfield',
    '#size' => 20,
    '#default_value' => $_SESSION['student']['data']->middle_name
  );
  $form['sex'] = array(
    '#type' => 'radios',
    '#title' => "Gender",
    '#options' => array('male' => 'Male', 'female' => 'Female'),
    '#required' => TRUE,
    '#default_value' => $_SESSION['student']['data']->gender
  );
  $form['mar'] = array(
    '#type' => 'radios',
    '#options' => array('married' => 'Married', 'single' => 'Single'),
    '#title' => 'MARITAL STATUS',
    '#required'=>TRUE,
    '#default_value' => $_SESSION['student']['data']->marital_status
  );
  $form['maiden'] = array(
    '#title' => 'Maiden Name',
    '#type' => 'textfield',
    '#size' => 20,
    '#default_value' => $_SESSION['student']['data']->maiden
   );
  $form['dob'] = array(
    '#type' => 'date',
    '#title' =>  'Date Of Birth',
    '#default_value' => array('day' => (int)substr($_SESSION['student']['data']->dob, -2), 'month' => (int)substr($_SESSION['student']['data']->dob, 5 , 2),  'year' => substr($_SESSION['student']['data']->dob, 0, 4))
  );

  if (isset($_SESSION['student']['data']->nationality)) {
    $nationality = $_SESSION['student']['data']->nationality;
  }
  else {
    $nationality = 156 ; /*nigeria*/
  }
  $form['nat'] = array(
     '#type' => 'select',
     '#default_value' => $nationality,
     '#options' => _veritas_country(),
     '#title' => 'Nationality'
  );

  $rels = _student_religion();
  $form['state'] = array(
    '#type' => 'select',
    '#options' => veritas_states(),
    '#title' => 'State Of Origin(Only for nigeria)',
    '#ahah' => array('event' => 'change', 'wrapper' => 'ilga', 'path' => 'student/ajaxlga/state', 'method' => 'html'),
    '#default_value' => $_SESSION['student']['data']->state_origin
  );
  $form['lga'] = array(
    '#type' => 'select',
    '#default_value' => 0,
    '#options' => veritas_lga(),
    '#title' => 'LGA',
    '#prefix' => '<div id="ilga">',
    '#suffix' => '</div>',
    '#attributes' => array('disabled' => 'disabled', ' class'=> 'form-select'),
    '#default_value' => $_SESSION['student']['data']->lkup_lga_origin
  );
  $form['address'] = array(
    '#type' => 'fieldset',
    '#title' => 'Permanent Home Address',
    '#collapsed' => FALSE,
    '#collapsible' => TRUE
  );
  $form['address']['address1'] = array(
    '#type' => 'textfield',
    '#size' => 60,
    '#required' => TRUE,
    '#title' => 'Address 1',
    '#default_value' => $_SESSION['student']['data']->permanent_address1
  );
  $form['address']['city'] = array(
    '#type' => 'textfield',
    '#title' => 'City',
    '#size' => 15,
    '#required' => TRUE ,
    '#default_value' => $_SESSION['student']['data']->permanent_address_city
  );
  $form['address']['astate'] = array(
    '#type' => 'select',
    '#options' => veritas_states(),
    '#title' => 'State',
    '#ahah' => array('event' => 'change', 'wrapper' => 'ailga', 'path' => 'student/ajaxlga/astate', 'method' => 'html'),
    '#required'=>TRUE,
    '#default_value' => $_SESSION['student']['data']->permanent_address_state
  );
  $form['contact_address'] = array(
    '#type' => 'fieldset',
    '#title' => 'Contact Address',
    '#collapsed' => FALSE,
    '#collapsible' => TRUE
  );
  $form['contact_address']['caddress1'] = array(
    '#type' => 'textfield',
    '#size' => 60,
    '#required' => TRUE,
    '#title' => 'Address 1',
    '#default_value' => $_SESSION['student']['data']->permanent_address1
  );
  $form['contact_address']['ccity'] = array(
    '#type' => 'textfield',
    '#title' => 'City',
    '#size' => 15,
    '#required' => TRUE,
    '#default_value' => $_SESSION['student']['data']->permanent_address_city
  );
  $form['contact_address']['castate'] = array(
    '#type' => 'select',
    '#options' => veritas_states(),
    '#title' => 'State',
    '#ahah' => array('event' => 'change', 'wrapper' => 'ailga', 'path' => 'student/ajaxlga/astate', 'method' => 'html'),
    '#required' => TRUE,
    '#default_value' => $_SESSION['student']['data']->permanent_address_state
  );
  $form['other_details'] = array(
    '#type' => 'fieldset',
    '#title' => 'Other Details',
    '#collapsed' => FALSE,
    '#collapsible' => TRUE
  );
  $form['other_details']['tel1'] = array(
    '#type' => 'textfield',
    '#size' => 25,
    '#required' => TRUE,
    '#title' => 'Landline',
    '#default_value' => $_SESSION['student']['data']->telephone
  );
  $form['other_details']['tel2'] = array(
    '#type' => 'textfield',
    '#size' => 25,
    '#title' => 'Mobile',
    '#default_value' => $_SESSION['student']['data']->mobile_number
  );
  $form['other_details']['email'] = array(
    '#type' => 'textfield',
    '#title' => 'Email',
    '#size' => 45,
    '#required' => TRUE,
    '#description' => 'Your login details will be sent here',
    '#default_value' => $_SESSION['student']['data']->email_address
  );
  $form['submit'] = array('#id' => 'edit-next', '#value' => 'Next', '#type' => 'submit');
  $form['#multistep'] = TRUE;
  $form['#redirect'] = TRUE;
  $form['#cache'] = TRUE;
  return $form;
}

function student_registration_form_submit($form, &$state) {

  if ($state['storage']['step'] == 7) {

    $t_id = make_transaction($form);
    ////////////////matriculation number /////////////////
    $mat_number = "VUG". vsprintf("%04d", array($_SESSION['student']['data']->student_id)) ;
    // here to insert drupal_user
    $sql = "select * from {role} where name = '%s'";
    $q = db_query($sql, 'Student');
    $f = db_fetch_object($q);
    $drupal_data = array(
      'mail' => $_SESSION['student']['data']->email_address,
      'pass' => $_SESSION['student']['data']->dob,
      'name' => 'S'.$mat_number,
      'roles' => array($f->rid),
      'init' => $_SESSION['student']['data']->email_address,
      'status' => 1
    );
    $user = user_save(NULL, $drupal_data);
    $query = "update {admitted_student} set matriculation_no ='". $mat_number ."' , user_id='". $user->uid ."' where student_id ='". $_SESSION['student']['data']->student_id ."'";
    db_query($query);
  /////////////////////////////////////////////////////
    $sql = "select * from {admitted_transaction} where transaction_id=%d";
    $sql = "SELECT at. * , sum( at2.trans_amount ) AS total_amount
           FROM {admitted_transaction} at
           INNER JOIN {admitted_transaction} at2 ON at.student_id = at2.student_id
           AND at.transaction_id =%d
           GROUP BY at.student_id";
    $q = db_query($sql, $t_id);
    $f = db_fetch_object($q);
    $type = $f->trans_type;
    $rc = db_query("select * from {admitted_student} where student_id=%d", $f->student_id);
    $fc = db_fetch_array($rc);

    // ALAN 20090802
    $result = db_query("SELECT * FROM {profile_fields} WHERE name IN ('profile_last_name', 'profile_first_name', 'profile_middle_name')");
    while ($row = db_fetch_array($result)) {
      if ($row['name'] === 'profile_last_name') {
        db_query("INSERT INTO {profile_values} (fid, uid, value) VALUES (%d, %d, '%s')", $row->fid, $user->uid, $fc['last_name']);
      }
      elseif ($row['name'] === 'profile_first_name') {
        db_query("INSERT INTO {profile_values} (fid, uid, value) VALUES (%d, %d, '%s')", $row->fid, $user->uid, $fc['first_name']);
      }
      elseif (($row['name'] === 'profile_middle_name') && !empty($fc['middle_name'])) {
        db_query("INSERT INTO {profile_values} (fid, uid, value) VALUES (%d, %d, '%s')", $row->fid, $user->uid, $fc['middle_name']);
      }
    }
    // END ALAN

    $f->name = $name = $fc['first_name'] .' '. $fc['middle_name'] .' '. $fc['last_name'];
    $f->student_data = $fc;
    $message = drupal_mail('student', 'receipt', $_SESSION['student']['data']->email_address, language_default(), array(), NULL, FALSE);
    $message['body'] = veritas_student_receipt($f,TRUE) .'<tr>
    <th>Username:
    </th>
    <td>S'. $mat_number .'
    </td>
  </tr><tr>
    <th>Password:
    </th>
    <td>'. $_SESSION['student']['data']->dob .'
    </td>
  </tr>';
    $message['subject'] = 'Transaction Receipt';
    $message['headers'] = array_merge($message['headers'], array( 'MIME-Version'  => '1.0', 'Content-Type'  => 'text/html; charset=UTF-8'));
    drupal_mail_send($message);
    drupal_goto('veritas/receipt/'. $t_id .'/student/');
  }
  if ($state['storage']['step'] == 6) {
    //$pic=file_save_upload_name('pic',array(),file_directory_path().'/student_pic',false,$_SESSION['student']['data']->jambno);
    $name = 'VUG'. vsprintf("%04d", array($_SESSION['student']['data']->student_id));
    $pic = file_save_upload_name('pic', array(), variable_get('file_directory_path',NULL) .'/student_pic', TRUE, $name);
    if (!$pic) {
      drupal_set_message('Picture cannot be uploaded ');
   //return;
    }
    $photo['pic'] = $pic->fid;
  //$signature=file_save_upload_name('signature',array(),'/sites/files/signature',false,$_SESSION['student']['data']->jambno);
    $signature = file_save_upload_name('signature', array(), variable_get('file_directory_path',NULL) .'/signature', TRUE, $name);
    if (!$signature) {
       drupal_set_message('Signature Picture cannot be uploaded ');
       return;
    }
    $photo['signature'] = $signature->fid;
    add_pics($photo);
   }
   if($state['storage']['step'] == 5) {
     add_accomodation($form);
   }
   if ($state['storage']['step'] == 4) {
      add_student_medical_details($form);
   }
   if ($state['storage']['step'] == 2) {
     add_kin($form);
   }
   if ($state['storage']['step'] == 3) {
      add_exam_detail($form);
   }
   if ($state['storage']['step'] == 1) {
     admit_student($form);
   }
   if ($state['clicked_button']['#id'] == 'edit-previous') {
      $state['storage']['step']--;
      return;
   }
   elseif ($state['clicked_button']['#id'] == 'edit-next') {
     $state['storage']['values'][$state['storage']['step']] = $state['values'];
     $state['#rebuild'] = true;
     $state['storage']['step']++;
     return;
   }
   else
    return;
    /*$nextstep=   $state['storage']['step'];

    $state['#rebuild']=true;
    if($nextstep==5){
     if($state[values][physical]=='disabled'){
     }
 $f8=file_save_upload('pic',array(),'',false);
 if(!$f8){
 drupal_set_message('Picture cannot be uploaded ');
 return;
 }
     $state[storage][file]=$f8->fid;
    }
    if($nextstep==3){
//     $state[storage][values][3][course1]=(int)$_POST[course1];
 //    $state[storage][values][3][course2]=(int)$_POST[course2];

    }
 if($nextstep==6){
$val=$state[storage][values][1];;
///var_dump($state[storage][values]);
$transid=$state[storage][transid];
  if(!$transid){
 drupal_set_message('Registration cannot be done . please contract admin');
  drupal_goto('veritas/error');

  }
  $type='sreg';
  $acc=veritas_user_save($type,$val[email],$transid);
$uid=$acc->uid;
if($uid){

$f=$state[storage][file];
 if($f){
  $fs=new stdClass();
  $fs->fid=$f;
 file_set_status($fs,FILE_STATUS_PERMANENT);
 }
student_add($uid,$state[storage][values],$f);
$t=db_query("select transaction_id from transaction where receipt_no='%s'",$transid);
$f=db_fetch_object($t);
 drupal_goto('veritas/receipt/'.$f->transaction_id);
} else {
 drupal_set_message('Registration cannot be done . please contract admin');
 drupal_goto('veritas/error');

}





 }*/
}

function student_reg_form(&$obj) {
   //print_R($_SESSION['student']['data']->matriculation_no);
  if (!$obj['storage']['step'])
    $obj['storage']['step'] = 1;
  $st = $obj['storage']['step'];
  if($st == 1)
    return _student_reg_form1($obj);
  else if ($st == 2)
    return _student_reg_form2($obj);
  else if ($st == 3)
    return _student_reg_form3($obj);
  else if ($st == 4)
    return _student_reg_form4($obj);
  else if($st == 5)
    return _student_reg_form5_etranzact($obj);
}

function _student_reg_form3($state) {
  $form['mark'] = array(
    '#value' => '<b>ACADEMIC AND EXAMINATIONS INFORMATION</b>'
  );
  $form['inst'] = array(
    '#type' => 'fieldset',
    '#title' => '1. INSTITUTIONS ATTENDED'
  );
  $form['inst']['in1'] = array(
    '#type' => 'textfield',
    '#title' => 'INSTITUTION NAME',
    '#required' => TRUE
  );
  $form['inst']['dst1'] = array(
    '#type' => 'ccdt',
    '#name' => 'dst1',
    '#title' => 'DATE STARTED',
    '#ccdt_attribute' => array(2001,2008),
    '#prefix' => '<table><tr><td>',
    '#suffix' => '</td>'
  );
  $form['inst']['den1'] = array(
    '#type' => 'ccdt',
    '#name' => 'den1',
    '#title' => 'DATE ENDED',
    '#ccdt_attribute' => array(2001, 2008),
    '#prefix' => '<td>',
    '#suffix' => '</td></tr></table>'
  );
  $form['inst']['q1'] = array(
    '#type' => 'textfield',
    '#title' => 'QUALIFICATION OBTAINED',
    '#required' => TRUE
  );
  $form['inst']['mhr1'] = array('#value' => '<hr/>');
  $form['inst']['in2'] = array(
    '#type' => 'textfield',
    '#title' => '2. INSTITUTION NAME'
  );
  $form['inst']['dst2'] = array(
     '#type' => 'ccdt',
     '#name' => 'dst2',
     '#title' => 'DATE STARTED',
     '#ccdt_attribute' => array(2001, 2008),
     '#prefix' => '<table><tr><td>',
     '#suffix' => '</td>'
   );
   $form['inst']['den2'] = array(
     '#type' => 'ccdt',
     '#name' => 'den2',
     '#title' => 'DATE ENDED',
     '#ccdt_attribute' => array(2001, 2008),
     '#prefix' => '<td>',
     '#suffix' => '</td></tr></table>'
   );
   $form['inst']['q2'] = array(
     '#type' => 'textfield',
     '#title' => 'QUALIFICATION OBTAINED'
   );
   $form['inst']['mhr2'] = array(
      '#value' => '<hr/>'
   );
   $form['nos'] = array(
     '#type' => 'radios',
     '#title' => 'NUMBER OF O-LEVEL SITTINGS',
     '#options' => array('1' => 'One Sitting', '2' => 'Two Sittings'),
     '#required' => TRUE
   );
   $form['fs'] = array(
      '#type' => 'fieldset',
      '#title' => 'FIRST SITTING',
      '#description' => 'Enter at least 6 distinct subjects'
   );
   $form['fs']['ebd1'] = array(
      '#type' => 'select',
      '#title' => 'EXAM BODY',
      '#options' => _student_bod(),
      '#required' => TRUE
   );
   $form['fs']['edate1'] = array(
     '#type' => 'date',
     '#title' => 'EXAM DATE',
     '#required' => TRUE
   );
   $form['fs']['ec1'] = array(
      '#type' => 'textfield',
      '#title' => 'EXAM CENTER',
      '#size' => '20',
      '#required' => TRUE
   );
   $form['fs']['eno1'] = array(
     '#type' => 'textfield',
     '#title' => 'EXAM NO',
     '#size' => '20',
     '#required' => TRUE
   );
   $form['fs']['ms1'] = array(
     '#type' => 'item',
     '#value' => 'SUBJECTS',
     '#prefix' => '<table><tr><td></td><th>',
     '#suffix' => '</th>'
   );
   $form['fs']['ms2'] = array(
      '#type' => 'item',
      '#value' => 'GRADE',
      '#prefix' => '<td>',
      '#suffix' => '</td></tr>'
   );
   $tend = '';
  for ($i = 1; $i <= 9; $i++) {
    $form['fs']["m1$i"] = array('#value' => '<tr><td>'.$i, '#suffix' => '</td>');
    $form['fs']["s1$i"] = array('#type' => 'select', '#options' => _student_sub(), '#prefix' => '<td>', '#suffix' => '</td>');
    if ($i == 9)
      $tend = "</table>";
   $form['fs']["g1$i"] = array(
     '#type' => 'select',
     '#options' => _student_gr(),
     '#prefix' => '<td>',
     '#suffix' => '</td></tr>'. $tend
   );
  }
//$form[fs]["m12"]=array('#value'=>'</table>');
  $form['fs2'] = array(
    '#type' => 'fieldset',
    '#title' => 'SECOND SITTING',
    '#description' => 'Enter at least 6 distinct subjects'
   );
   $form['fs2']['ebd2'] = array(
     '#type' => 'select',
     '#title' => 'EXAM BODY',
     '#options' => _student_bod()
    );
    $form['fs2']['edate2'] = array(
      '#type' => 'date',
      '#title' => 'EXAM DATE'
    );
    $form['fs2']['ec2'] = array(
      '#type' => 'textfield',
      '#title' => 'EXAM CENTER',
      '#size' => 20
    );
   $form['fs2']['eno2'] = array(
     '#type' => 'textfield',
     '#title' => 'EXAM NO',
     '#size' => '20'
   );
   $form['fs2']['ms11'] = array(
     '#type' => 'item',
     '#value' => 'SUBJECTS',
     '#prefix' => '<table><tr><td></td><th>',
     '#suffix' => '</th>'
    );
   $form['fs2']['ms12'] = array(
     '#type' => 'item',
     '#value' => 'GRADE',
     '#prefix' => '<td>',
     '#suffix' => '</td></tr>'
   );
   $tend = '';
   for ($i = 1; $i <= 9; $i++) {
     $form['fs2']["m2$i"] = array(
       '#value' => '<tr><td>'. $i,
       '#suffix' => '</td>'
     );
     $form['fs2']["s2$i"] = array(
       '#type' => 'select',
       '#options' => _student_sub(),
       '#prefix' => '<td>',
       '#suffix' => '</td>'
     );
     if ($i == 9)
       $tend="</table>";
    $form['fs2']["g2$i"] = array(
      '#type' => 'select',
      '#options' => _student_gr(),
      '#prefix' => '<td>',
      '#suffix' => '</td></tr>'. $tend
    );
  }
  // if(is_array($state[storage][values][3]))
  // _assign_keys($form,$state[storage][values][3]);
  $form['jambsubp'] = array('#id' => 'edit-previous', '#value' => 'Previous', '#type' => 'submit');
  $form['jambsubn'] = array('#id' => 'edit-next', '#value' => 'Next', '#type' => 'submit');
  return $form;
}

function _student_reg_form5($obj) {
  $amt = variable_get('veritas_student_regfees', '1000');
  $amt = number_format($amt, 2);
  $form['fees'] = array(
    '#type' => 'fieldset',
    '#title' => 'Registration Fees'
  );
  $form['fees']['mark'] = array(
    '#type' => 'item',
    '#title' => 'Amount Payable',
    '#value' => 'NGN '. $amt
  );
  /// $form[fees][m]=array('#name'=>'m','#type'=>'radios','#options'=>array('1'=>'Bank Payment','2'=>'Card Payment'),'#title'=>'Payment Method','#required'=>1,'#default_value'=>1,'#attributes'=>array('disabled'=>'disabled'));
  $form['fees']['rno'] = array(
    '#type' => 'textfield',
    '#size' => 45,
    '#title' => 'TELLER NUMBER',
    '#prefix' => '<table border="1" align="center"><tr><td><table colspan="2" cellspan="2" align="center"><caption>BANK PAYMENT INFORMATION</caption><tr><td>',
    '#suffix' => '</td></tr>',
    '#required' => TRUE
   );
   $form['fees']['cno'] = array(
     '#type' => 'textfield',
     '#size' => 45,
     '#title' => 'NAME',
     '#prefix' => '<tr><td>',
     '#suffix' => '</td></tr></table></td></tr></table>',
     '#required' => TRUE
   );
/// $form[fees][fset]=array('#type'=>'fieldset','#title'=>'Your Credit Card Detail','#prefix'=>'<td>','#suffix'=>'</td></tr>');

  //$form[fees][cc]=array('#type'=>'textfield','#title'=>'CARD NUMBER','#size'=>'25','#prefix'=>'<td><table colspan="2" cellspan="2"><caption>CREDIT CARD PAYMENT</caption><tr><th>','#suffix'=>'</th>');
 //$form[fees][cpin]=array('#title'=>'CARD PIN','#type'=>'textfield','#size'=>'5','#prefix'=>'<tr><td>','#suffix'=>'</td></tr>');

 //$form[fees]['ed']=array('#type'=>'ccdt','#title'=>'EXPIRY DATE','#prefix'=>'<tr><td>','#suffix'=>'</td></tr></table></td></tr></table>');
 //if(is_array($state[storage][values][3]))
 //assign_keys($form,$state[storage][values][3]);
   $form['jambsubp'] = array('#id' => 'edit-previous', '#value' => 'Previous', '#type' => 'submit');
   $form['jambsubn'] = array('#id' => 'edit-next', '#value' => 'Next', '#type' => 'submit');
   $form['#multistep'] = TRUE;
   $form['#redirect'] = FALSE;
   return $form;
}

function _student_reg_form5_etranzact($obj){
    $amt=variable_get('veritas_student_regfees','1000');
    $amt=number_format($amt,2);

    $form[fees]=array('#type'=>'fieldset','#title'=>'Registration Fees');
    $form[fees][mark]=array('#type'=>'item','#title'=>'Amount Payable','#value'=>'NGN '.$amt);

    /// $form[fees][m]=array('#name'=>'m','#type'=>'radios','#options'=>array('1'=>'Bank Payment','2'=>'Card Payment'),'#title'=>'Payment Method','#required'=>1,'#default_value'=>1,'#attributes'=>array('disabled'=>'disabled'));

    //$form[fees][rno]=array('#type'=>'textfield','#size'=>45,'#title'=>'TELLER NUMBER','#prefix'=>'<table border="1" align="center"><tr><td><table colspan="2" cellspan="2" align="center"><caption>BANK PAYMENT INFORMATION</caption><tr><td>','#suffix'=>'</td></tr>' ,'#required'=>true);
    //$form[fees][cno]=array('#type'=>'textfield','#size'=>45,'#title'=>'NAME','#prefix'=>'<tr><td>','#suffix'=>'</td></tr></table></td></tr></table>','#required'=>true);
    $form[fees][rno]=array('#type'=>'textfield','#size'=>45,'#title'=>'RECEIPT NUMBER','#prefix'=>'<table border="1" align="center"><tr><td><table colspan="2" cellspan="2" align="center"><caption>ETRANZACT PAYMENT INFORMATION</caption><tr><td>','#suffix'=>'</td></tr>' ,'#required'=>true);
    $form[fees][cno]=array('#type'=>'textfield','#size'=>45,'#title'=>'CONFIRMATION NUMBER','#prefix'=>'<tr><td>','#suffix'=>'</td></tr>','#required'=>true);
    $form[fees][amt]=array('#type'=>'textfield','#size'=>45,'#title'=>'PAYMENT AMOUNT','#prefix'=>'<tr><td>','#suffix'=>'</td></tr></table></td></tr></table>','#required'=>true);
    /// $form[fees][fset]=array('#type'=>'fieldset','#title'=>'Your Credit Card Detail','#prefix'=>'<td>','#suffix'=>'</td></tr>');

    //$form[fees][cc]=array('#type'=>'textfield','#title'=>'CARD NUMBER','#size'=>'25','#prefix'=>'<td><table colspan="2" cellspan="2"><caption>CREDIT CARD PAYMENT</caption><tr><th>','#suffix'=>'</th>');
    //$form[fees][cpin]=array('#title'=>'CARD PIN','#type'=>'textfield','#size'=>'5','#prefix'=>'<tr><td>','#suffix'=>'</td></tr>');

    //$form[fees]['ed']=array('#type'=>'ccdt','#title'=>'EXPIRY DATE','#prefix'=>'<tr><td>','#suffix'=>'</td></tr></table></td></tr></table>');
    //if(is_array($state[storage][values][3]))
    //assign_keys($form,$state[storage][values][3]);

    $form['jambsubp']=array('#id'=>'edit-previous','#value'=>'Previous','#type'=>'submit');
    $form['jambsubn']=array('#id'=>'edit-next','#value'=>'Next','#type'=>'submit');

    $form['#multistep']=true;
    $form['#redirect']=false;

    return $form;

}

function _student_reg_form1(&$obj) {
   $form['q'] = array(
     '#type' => 'checkbox',
     '#title' => 'Yes I have already paid the required amount before 24 hours',
     '#description' => 'Please confirm you have already paid through bank at least before 24 hours from now.and have the TELLER NUMBER and NAME . <br />You will be required to enter this information later and the paid amount must match with the amount payable now. In case you are not able to provide the required information the form won\'t be accepted'
   );
   $form['#title'] = t('Personal Information');
   $form['jam'] = array(
     '#title' => 'JAMB NO',
     '#type' => 'textfield',
     '#size' => 20,
     '#required' => TRUE,
     '#default_value' => $_SESSION['student']['data']->jambno
   );
   $form['mode'] = array(
     '#type' => 'select',
     '#options' => array('UME' => 'UME', 'DE' => 'DE', 'MEX' => 'MEX'),
     '#title' => 'Mode Of Entry',
     '#default_value' => $_SESSION['student']['data']->mode_of_entry
   );
   $form['mods'] = array(
     '#title' => 'Mode Of Study',
     '#type' => 'select',
     '#options' => array('Full_Time' => 'Full Time', 'Part_Time' => 'Part Time', 'Weekend' => 'Weekend', 'Evening' => 'Evening', 'Sandwich' => 'Sandwich', 'Ocassional' => 'Ocassional' , 'Correspondence' => 'Correspondence', 'Distance_Learning' => 'Distance_Learning'),
     '#default_value' => $_SESSION['student']['data']->mode_of_study
   );
   $form['title'] = array(
      '#type' => 'select',
      '#options' => _veritas_titles() /*array('Mr'=>'Mr','Ms'=>'Ms','Mrs'=>'Mrs')*/,
      '#required' => TRUE,
      '#title' => 'Title',
      '#default_value' => $_SESSION['student']['data']->title
    );
    $form['lname'] = array(
      '#title' => 'Surname',
      '#type' => 'textfield',
      '#size' => 20,
      '#required' => TRUE,
      '#default_value' => $_SESSION['student']['data']->last_name
    );
   $form['fname'] = array(
     '#title' => 'First Name',
     '#type' => 'textfield',
     '#size' => 20,
     '#required' => TRUE,
     '#default_value' => $_SESSION['student']['data']->first_name
   );
   $form['mname'] = array(
     '#title' => 'Middle Name',
     '#type' => 'textfield',
     '#size' => 20,
     '#default_value' => $_SESSION['student']['data']->middle_name
   );
   $form['sex'] = array(
     '#type' => 'radios',
     '#title' => "Gender",
     '#options' => array('male' => 'Male', 'female' => 'Female'),
     '#required' =>TRUE,
     '#default_value' => $_SESSION['student']['data']->gender
   );
   $form['dob'] = array(
     '#type' => 'date',
     '#title' => 'Date Of Birth',
     '#default_value' => $_SESSION['student']['data']->dob
    );
   $form['mar'] = array(
     '#type' => 'radios',
     '#options' => array('married' => 'Married', 'single' => 'Single'),
     '#title' => 'MARITAL STATUS',
     '#required' => TRUE,
     '#default_value' => $_SESSION['student']['data']->marital_status
   );
   if (isset($_SESSION['student']['data']->nationality)) {
      $nationality = $_SESSION['student']['data']->nationality;
   }
   else {
     $nationality = 156 ; /*nigeria*/
   }
   $form['nat'] = array(
      '#type' => 'select',
      '#default_value' => $nationality ,
      '#options' => _veritas_country() ,
      '#title' => 'Nationality'
   );
   $rels = _student_religion();
   $form['state'] = array(
     '#type' => 'select',
     '#options' => veritas_states(),
     '#title' => 'State Of Origin(Only for nigeria)',
     '#ahah' => array('event' => 'change', 'wrapper' => 'ilga', 'path' => 'student/ajaxlga/state', 'method' => 'html'),
     '#default_value' => $_SESSION['student']['data']->state_origin
    );
   $form['lga'] = array(
      '#type' => 'select',
      '#default_value' => 0,
      '#options' => veritas_lga(),
      '#title' => 'LGA',
      '#prefix' => '<div id="ilga">',
      '#suffix' => '</div>',
      '#attributes' => array('disabled' => 'disabled', 'class' => 'form-select'),
      '#default_value' => $_SESSION['student']['data']->lkup_lga_origin
    );
    $form['rel'] = array(
      '#title' => 'Religion',
      '#type' => 'select',
      '#options' => $rels,
      '#ahah' => array('event' => 'change', 'wrapper' => 'edit-subr', 'path' => 'student/religions', 'method' => 'html'),
      '#default_value' => $_SESSION['student']['data']->religion
   );
   $form['subrel'] = array(
      '#value' => '<div id="edit-subr"></div>',
      '#default_value' => $_SESSION['student']['data']->subrel
    );
 // $form['subrel']=array('#title'=>'Denomination','#option'=>_student_sub(),'#atteibute'=>array('disabled'=>'disabled'));
   $form['hob'] = array(
      '#type' => 'textfield',
      '#title' => 'HOBBIES',
      '#size' => 40,
      '#default_value' => $_SESSION['student']['data']->hobbies
    );
    $form['address'] = array(
      '#type' => 'fieldset',
      '#title' => 'Address & Contact Info',
      '#collapsed' => FALSE,
      '#collapsible' => TRUE
    );
    $form['address']['email'] = array(
      '#type' => 'textfield',
      '#title' => 'Email',
      '#size' => 45,
      '#required' => TRUE,
      '#description' => 'Your login details will be sent here',
      '#default_value' => $_SESSION['student']['data']->email_address
    );
   $form['address']['city'] = array(
     '#type' => 'textfield',
     '#title' => 'City',
     '#size' => 15,
     '#required' => TRUE,
     '#default_value' => $_SESSION['student']['data']->permanent_address_city
    );
    $form['address']['astate'] = array(
       '#type' => 'select',
       '#options' => veritas_states(),
       '#title' => 'State',
       '#ahah' => array('event' => 'change', 'wrapper' => 'ailga', 'path' => 'student/ajaxlga/astate', 'method' => 'html'),
       '#required' => TRUE,
       '#default_value' => $_SESSION['student']['data']->permanent_address_state
     );
   $form['address']['alga'] = array(
     '#type' => 'select',
     '#options' => veritas_lga(),
     '#title' => 'LGA',
     '#prefix' => '<div id="ailga">',
     '#suffix' => '</div>',
     '#attributes' => array('class' => 'form-select', 'disabled' => 'disabled'),
     '#default_value' => $_SESSION['student']['data']->permanent_address1
   );
   $form['address']['address1'] = array(
     '#type' => 'textfield',
     '#size' =>60,
     '#required' => TRUE,
     '#title' => 'Address 1',
     '#default_value' => $_SESSION['student']['data']->permanent_address1
   );
// $form[address][address2]=array('#type'=>'textfield','#size'=>25 ,'#title'=>'Address 2');
   $form['address']['tel1'] = array(
     '#type' => 'textfield',
     '#size' => 25,
     '#required' => TRUE,
     '#title' => 'Telephone',
     '#default_value' => $_SESSION['student']['data']->telephone
    );
   $form['address']['tel2'] = array(
     '#type' => 'textfield',
     '#size' =>25,
     '#title' => 'Mobile',
     '#default_value' => $_SESSION['student']['data']->mobile_number
    );
    $form['kin'] = array(
      '#type' => 'fieldset',
      '#title' => 'Relationship Information'
    );
    $form['kin']['kname'] = array(
       '#type' => 'textfield',
       '#size' =>45,
       '#title' => 'KIN NAME',
       '#required' => TRUE
    );
    $form['kin']['kadd'] = array(
      '#type' => 'textarea',
      '#rows' => 3,
      '#cols' => 10,
      '#title' =>'Address',
      '#required' => TRUE
    );
    $form['kin']['kcity'] = array(
      '#type' => 'textfield',
      '#size' => 20,
      '#title' => 'City',
      '#required' => TRUE
    );
    $form['kin']['kstate'] = array(
      '#type' => 'select',
      '#options' => veritas_states(),
      '#required' => TRUE,
      '#title' => 'STATE'
    );
    $form['kin']['ktel'] = array(
      '#type' => 'textfield',
      '#size' => 25,
      '#title' => 'Telephone'
    );
    $form['kin']['krel'] = array(
      '#type' => 'select',
      '#options' => _student_rel(),
      '#title' => 'Relationship',
      '#required' => TRUE
    );
 ///if(is_array($obj[storage][values][1]))
 //_assign_keys($form,$obj[storage][values][1]);

   $form['submit'] = array('#id' => 'edit-next', '#value' => 'Next', '#type' => 'submit');
   $form['#multistep'] = TRUE;
   $form['#redirect'] = FALSE;
   return $form;
}

function _student_reg_form2($state) {
   $curl = url('student/ajaxcourse', array('absolute' => TRUE));
   drupal_add_js(array('student' => array('courseurl' => $curl)), 'setting');
   drupal_add_js('
   var student = {};
   student.getcourse = function(p,x){
   p = p.options[p.options.selectedIndex].value;
   if(p == "") {
    return;
   }
   $.post(Drupal.settings.student.courseurl,{dep: p,div: x},
   function (data) {
   e = Drupal.parseJson(data);
  if (e.status) {
    $("#"+x).html(e.data);
  }
  }
  ); //post
  }

  ', 'inline', 'header');
   $result = db_query("Select * from {programme} where programme_id='". $_SESSION['student']['data']->first_choice ."'");
   $data = db_fetch_array($result);
   $form['#cache'] = FALSE; //$data['department_id']
   $form['markx'] = array('#value' => '<b>JAMB DETAILS<b/>');
   $form['fc'] = array(
      '#type' => 'fieldset',
      '#title' => 'FIRST CHOICE'
   );
   $form['fc']['col1'] = array('#type' => 'select',
     '#default_value' => 1,
     '#options' => _student_col(),
     '#title' => 'College',
     '#theme' => 'hidden'
   );
   $form['fc']['dep1'] = array(
      '#type' => 'select',
      '#default_value' => $data['department_id'],
      '#options' => _student_dep(),
      '#title' => 'Department',
      '#ahah' => array('wrapper' => 'div-id-co1', 'method' => 'html', 'event' => 'change', 'path' => 'student/ajaxdep/dep1')
    );
   $form['fc']['course1'] = array(
     '#type' => 'select',
     '#default_value' => $_SESSION['student']['data']->first_choice,
     '#options' => _student_prg(),
     '#title' => 'Course',
     '#prefix' => '<div id="div-id-co1">',
     '#suffix' => '</div>',
     '#attributes' => array('disabled'=>'disabled')
   );
   $form['fc1'] = array(
     '#type' => 'fieldset',
     '#title' => 'SECOND CHOICE'
   );
   $form['fc1']['col2'] = array(
     '#type' => 'select',
     '#default_value' => 1,
     '#options' => _student_col(),
     '#title' => 'College',
     '#theme' => 'hidden',
     '#ahah' => array('wrapper' => 'div-id-dp2' , 'method' => 'html', 'event' => 'change', 'path' => 'student/ajaxdep/col2')
   );
   $form['fc1']['dep2'] = array(
     '#type' => 'select',
     '#default_value' => 0,
     '#options' => _student_dep(),
     '#title' => 'Department',
     '#prefix' => '<div id="div-id-dp2">',
     '#suffix' => '</div>',
     '#ahah' => array('wrapper' => 'div-id-co2', 'method' => 'html', 'event' => 'change', 'path' => 'student/ajaxcourse/dep2')
   );
   $form['fc1']['course2'] = array(
     '#type' => 'select',
     '#default_value' => 0,
     '#options' => _student_prg(),
     '#title' => 'Course',
     '#prefix' => '<div id="div-id-co2">',
     '#suffix' => '</div>',
     '#attributes' => array('disabled'=>'disabled')
    );
   $form['sub'] = array(
     '#type' => 'fieldset',
     '#title' => 'SUBJECTS FOR UNIVERSITIES MATRICULATION EXAMINATION'
   );
   $form['sub']['s1'] = array(
     '#type' => 'item',
     '#title' => 'SUBJECT 1',
     '#value' => 'English(Compulsory)'
   );
   $form['sub']['s2'] = array(
     '#type' => 'select',
     '#options' => _student_sub(),
     '#title' => 'SUBJECT 2'
   );
   $form['sub']['s3'] = array(
     '#type' => 'select',
     '#options' => _student_sub(),
     '#title' => 'SUBJECT 3'
   );
   $form['sub']['s4'] = array(
     '#type' => 'select',
     '#options' => _student_sub(),
     '#title' => 'SUBJECT 4'
   );
   $form['etown'] = array(
      '#type' => 'textfield',
      '#title' => 'EXAMINATION TOWN',
      '#size' => 24,
      '#required' => TRUE
   );
   // if(is_array($obj[storage][values][2]))
   // _assign_keys($form,$state[storage][values][2]);
   $form['jambsubp'] = array('#id' => 'edit-previous', '#value' => 'Previous', '#type' => 'submit');
   $form['jambsubn']=array('#id' => 'edit-next', '#value' => 'Next', '#type' => 'submit');
   $form['#multistep'] = TRUE;
   $form['#redirect'] = TRUE;
   return $form;
}

function _student_registration_form2($state) {
   $result = db_query("Select * from next_of_kin where student_id ='". $_SESSION['student']['data']->student_id ."'");
   $data = db_fetch_array($result);
   $form['#cache'] = FALSE; //$data['department_id']
   $form['kin'] = array(
     '#type' => 'fieldset',
     '#title' => 'NEXT OF KIN',
     '#collapsible' => TRUE
   );
   $form['kin']['title'] = array(
     '#type' => 'select',
     '#options' => _veritas_titles() /*array('Mr'=>'Mr','Ms'=>'Ms','Mrs'=>'Mrs')*/,
     '#required' => TRUE,
     '#title' => 'Title',
     '#default_value' => $data['name']
   );
   $form['kin']['kname'] = array(
     '#type' => 'textfield',
     '#size' => 45,
     '#title' => 'Name',
     '#required' => TRUE,
     '#default_value' => $data['name']
   );
   $form['kin']['kadd'] = array(
      '#type' => 'textarea',
      '#rows' => 3,
      '#cols' => 10,
      '#title' => 'Address',
      '#required' => TRUE,
      '#default_value' => $data['address1']
   );
   $form['kin']['kcity'] = array(
     '#type' => 'textfield',
     '#size' =>20,
     '#title' => 'City',
     '#required' => TRUE,
     '#default_value' => $data['city']
   );
   $form['kin']['krel'] = array(
     '#type' => 'select',
     '#options' => _student_rel(),
     '#title' => 'Relationship',
     '#required' => TRUE,
     '#default_value' => trim($data['relationship'])
   );
   $form['kin']['ktel'] = array(
     '#type' => 'textfield',
     '#size' => 25,
     '#title' => 'Landline number',
     '#default_value' => $data['telephone']);
   $form['kin']['kmobile'] = array(
     '#type' => 'textfield',
     '#size' =>25,
     '#title' => 'Mobile',
     '#default_value' => $data['mobile']
   );
   $form['sponsor'] = array(
     '#type' => 'fieldset',
     '#title' => '<b>SPONSOR</b>',
     '#collapsible' => TRUE,
     '#description' => '(please fill if sponsor is different from next of kin)'
   );
   $form['sponsor']['title'] = array(
    '#type' => 'select',
    '#options' => _veritas_titles() /*array('Mr'=>'Mr','Ms'=>'Ms','Mrs'=>'Mrs')*/,
    '#title' => 'Title', '#default_value' => ''
   );
   $form['sponsor']['sname'] = array(
     '#type' => 'textfield',
     '#size' => 45,
     '#title' => 'Name'
   );
   $form['sponsor']['sadd'] = array(
     '#type' => 'textarea',
     '#rows' => 3,
     '#cols' => 10,
     '#title' => 'Address'
   );
   $form['sponsor']['scity'] = array(
     '#type' => 'textfield',
     '#size' => 20,
     '#title' => 'City'
   );
   $form['sponsor']['stel'] = array(
     '#type' => 'textfield',
     '#size' => 25,
     '#title' => 'Landline number'
   );
   $form['sponsor']['smobile'] = array(
     '#type' => 'textfield',
     '#size' => 25,
     '#title' => 'Mobile'
   );
  // if(is_array($obj[storage][values][2]))
  // _assign_keys($form,$state[storage][values][2]);
   $form['jambsubp'] = array('#id' => 'edit-previous', '#value' => 'Previous', '#type' => 'submit');
   $form['jambsubn'] = array('#id' => 'edit-next', '#value' => 'Next', '#type' => 'submit');
   $form['#multistep'] = TRUE;
   $form['#redirect'] = FALSE;
   return $form;
}

function _student_registration_form3($state) {

   $disable = "
    $(document).ready(function(){
         $(\"input[name='nos']\").click(

       function(){


       var disabled = true;
       if($(this).val() == 2){

        disabled = false;
       }

       $('#edit-ebd2').attr('disabled',disabled);
       $('#edit-ec2').attr('disabled',disabled);
       $('#edit-eno2').attr('disabled',disabled);

       $('div[id^=\"edit-edate2\"] > select').attr('disabled',disabled);
       $('div[id^=\"edit-s2\"] > select').attr('disabled',disabled);
       $('div[id^=\"edit-g2\"] > select').attr('disabled',disabled);

      }

      );
     $('#edit-ebd2').attr('disabled',true);
     $('#edit-ec2').attr('disabled',true);
     $('#edit-eno2').attr('disabled',true);
     $('div[id^=\"edit-edate2\"] > select').attr('disabled',true);
     $('div[id^=\"edit-s2\"] > select').attr('disabled',true);
     $('div[id^=\"edit-g2\"] > select').attr('disabled',true);
      });
     ";
    drupal_add_js($disable, 'inline', 'header');
    $query = " SELECT *  FROM {ext_exam_record} er LEFT JOIN {ext_exam_detail} ed ON ed.ext_exam_record_id = er.ext_exam_rec_id
where er.exam_student_id = '". $_SESSION['student']['data']->student_id ."' order by er.ext_exam_rec_id " ;
    $r = db_query($query);
    while ($f = db_fetch_object($r)) {

       $prev_subjects = $data[$f->ext_exam_rec_id]['subjects'] ;
       $data[$f->ext_exam_rec_id] = array(

         'exam_body' => $f->exam_body,
         'exam_date' => $f->exam_date,
         'exam_center_name' => $f->exam_center_name,
         'exam_number' => $f->exam_number,
         'exam_body' => $f->exam_body,
       );
       $data[$f->ext_exam_rec_id]['subjects'] = $prev_subjects ;
       $data[$f->ext_exam_rec_id]['subjects'][] = array(
         'subject' => $f->subject_id,
         'grade'   =>$f->grade_id
       );
       $data_key[] = $f->ext_exam_rec_id;
    }
    unset($data);
    $form['mark'] = array('#value' => '<b>ACADEMIC AND EXAMINATIONS INFORMATION</b>');
    $form['inst'] = array(
       '#type' => 'fieldset',
       '#title' => '1. INSTITUTIONS ATTENDED'
    );
    $form['inst']['in1'] = array(
       '#type' => 'textfield',
       '#title' => 'INSTITUTION NAME',
       '#required' => TRUE
    );
    $form['inst']['dst1'] = array(
      '#type' => 'ccdt',
      '#name' => 'dst1',
      '#title' => 'DATE STARTED',
      '#ccdt_attribute' => array(2001, 2008),
      '#prefix' => '<table><tr><td>',
      '#suffix' => '</td>'
   );
   $form['inst']['den1'] = array(
      '#type' => 'ccdt',
      '#name' => 'den1',
      '#title' => 'DATE ENDED',
      '#ccdt_attribute' => array(2001, 2008),
      '#prefix' => '<td>',
      '#suffix' => '</td></tr></table>'
   );
   $form['inst']['q1'] = array(
     '#type' => 'textfield',
     '#title' => 'QUALIFICATION OBTAINED',
     '#required' => TRUE
   );
   $form['inst']['mhr1'] = array('#value' => '<hr/>');
   $form['inst']['in2'] = array(
      '#type' => 'textfield',
      '#title' => '2. Second Secondary Institution Attended (skip this section if you have attended only one secondary Institution)'
   );
   $form['inst']['dst2'] = array(
     '#type' => 'ccdt',
     '#name' => 'dst2',
     '#title' => 'DATE STARTED',
     '#ccdt_attribute' => array(2001, 2008),
     '#prefix' => '<table><tr><td>',
     '#suffix' => '</td>'
   );
   $form['inst']['den2'] = array(
     '#type' => 'ccdt',
     '#name' => 'den2',
     '#title' => 'DATE ENDED',
     '#ccdt_attribute' => array(2001, 2008),
     '#prefix' => '<td>',
     '#suffix' => '</td></tr></table>'
   );
   $form['inst']['q2'] = array(
     '#type' => 'textfield',
     '#title' => 'QUALIFICATION OBTAINED'
   );
   $form['inst']['mhr2'] = array('#value' => '<hr/>');
   $form['nos'] = array(
      '#type' => 'radios',
      '#title' => 'NUMBER OF O-LEVEL SITTINGS',
      '#options' => array('1' => 'One Sitting', '2' => 'Two Sittings'),
      '#required' => TRUE,
      '#default_value' => 1
    );
    $form['fs'] = array(
      '#type' => 'fieldset',
      '#title' => 'FIRST SITTING',
      '#description' => 'Enter at least 6 distinct subjects'
    );
   $form['fs']['ebd1'] = array(
     '#type' => 'select',
     '#title' => 'EXAM BODY',
     '#options' => _student_bod(),
     '#required' => TRUE,
     '#default_value' => $data[$data_key[0]]['exam_body']
   );
   $form['fs']['edate1'] = array(
     '#type' => 'date',
     '#title' => 'EXAM DATE',
     '#required' => TRUE,
     '#default_value' => $data[$data_key[0]]['exam_date']
   );
   $form['fs']['ec1'] = array(
     '#type' => 'textfield',
     '#title' => 'EXAM CENTER',
     '#size' => '20',
     '#required' => TRUE,
     '#default_value' => $data[$data_key[0]]['exam_center_name']
   );
   $form['fs']['eno1'] = array(
     '#type' => 'textfield',
     '#title' => 'EXAM NO',
     '#size' => '20',
     '#required' => TRUE,
     '#default_value' => $data[$data_key[0]]['exam_number']
   );
   $form['fs']['ms1'] = array(
     '#type' => 'item',
     '#value' => 'SUBJECTS',
     '#prefix' => '<table><tr><td></td><th>',
     '#suffix' => '</th>'
   );
   $form['fs']['ms2'] = array(
     '#type' => 'item',
     '#value' => 'GRADE',
     '#prefix' => '<td>',
     '#suffix' => '</td></tr>'
   );
   $temp = 0;
   for ($i = 1; $i <= 9; $i++) {
     $temp = $i - 1;
     $form['fs']["m1$i"] = array('#value' => '<tr><td>'.$i, '#suffix' => '</td>');
     $form['fs']["s1$i"] = array(
        '#type' => 'select',
        '#options' => _student_sub(),
        '#prefix' => '<td>',
        '#suffix' => '</td>',
        '#default_value' => $data[$data_key[0]]['subjects'][$temp]['subject']
     );
     if ($i == 9)
       $tend = "</table>";
     $form['fs']["g1$i"] = array(
       '#type' => 'select',
       '#options' => _student_gr(),
       '#prefix' => '<td>',
       '#suffix' => '</td></tr>'. $tend,
       '#default_value' => $data[$data_key[0]]['subjects'][$temp]['grade']
     );
     $temp = 0;
   }
   unset($data[$data_key[0]]);
   //$form[fs]["m12"]=array('#value'=>'</table>');
   //ext_exam_rec_id  exam_date  exam_center_name  exam_number  exam_body  exam_student_id  ext_exam_record_id  subject_id  grade_id
   $form['fs2'] = array(
      '#id' => 'setting_sec',
      '#type' => 'fieldset',
      '#title' => 'SECOND SITTING',
      '#description' => 'Enter at least 6 distinct subjects'
   );
   $form['fs2']['ebd2'] = array(
     '#type' => 'select',
     '#title' => 'EXAM BODY',
     '#options' => _student_bod(),
     '#default_value' => $data[$data_key[1]]['exam_body']
   );
   $form['fs2']['edate2'] = array(
      '#type' => 'date',
      '#title' => 'EXAM DATE',
      '#default_value' => $data[$data_key[1]]['exam_date']
   );
   $form['fs2']['ec2'] = array(
      '#type' => 'textfield',
      '#title' => 'EXAM CENTER',
      '#size' => 20,
      '#default_value' => $data[$data_key[1]]['exam_center_name']
   );
   $form['fs2']['eno2'] = array(
     '#type' => 'textfield',
     '#title' => 'EXAM NO',
     '#size' => '20',
     '#default_value' => $data[$data_key[1]]['exam_number']
   );
   $form['fs2']['ms11'] = array(
     '#type' => 'item',
     '#value' => 'SUBJECTS',
     '#prefix' => '<table><tr><td></td><th>','#suffix'=>'</th>'
   );
   $form['fs2']['ms12'] = array(
     '#type' => 'item',
     '#value' => 'GRADE',
     '#prefix' => '<td>',
     '#suffix' => '</td></tr>'
   );
   $tend = '';
   for ($i = 1; $i <= 9; $i++) {
     $temp = $i - 1;
     $form['fs2']["m2$i"] = array('#value' => '<tr><td>'.$i, '#suffix' => '</td>');
     $form['fs2']["s2$i"] = array(
        '#type' => 'select',
        '#options' => _student_sub(),
        '#prefix' => '<td>',
        '#suffix' => '</td>',
        '#default_value' => $data[$data_key[1]]['subjects'][$temp]['subject']
     );
     if ($i == 9)
       $tend = "</table>";
     $form['fs2']["g2$i"] = array(
       '#type' => 'select',
       '#options' => _student_gr(),
       '#prefix' => '<td>',
       '#suffix' => '</td></tr>'. $tend,
       '#default_value' => $data[$data_key[1]]['subjects'][$temp]['grade']
     );
     $temp = 0;
   }
   // if(is_array($state[storage][values][3]))
   // _assign_keys($form,$state[storage][values][3]);
   $form['jambsubp'] = array('#id' => 'edit-previous', '#value' => 'Previous', '#type' => 'submit');
   $form['jambsubn'] = array('#id' => 'edit-next', '#value' => 'Next', '#type' => 'submit');
   return $form;
}

function _student_registration_form7($obj) {

   $amt = variable_get('veritas_student_regfees1', '200000');
   $amt = number_format($amt, 2);
   $form['fees'] = array('#type' => 'fieldset', '#title' => 'Registration Fees');
   //$form[fees][mark]=array('#type'=>'item','#title'=>'Amount Payable','#value'=>'NGN '.$amt);
   /// $form[fees][m]=array('#name'=>'m','#type'=>'radios','#options'=>array('1'=>'Bank Payment','2'=>'Card Payment'),'#title'=>'Payment Method','#required'=>1,'#default_value'=>1,'#attributes'=>array('disabled'=>'disabled'));
   $form['fees']['rno'] = array(
      '#type' => 'textfield',
      '#size' => 45,
      '#title' => 'TELLER NUMBER',
      '#prefix' => '<table border="1" align="center"><tr><td><table colspan="2" cellspan="2" align="center"><caption>BANK PAYMENT INFORMATION</caption><tr><td>',
      '#suffix' => '</td></tr>',
      '#required' => TRUE
   );
   $form['fees']['cno'] = array(
     '#type' => 'textfield',
     '#size' => 45,
     '#title' => 'NAME',
     '#prefix' => '<tr><td>',
     '#suffix' => '</td></tr></table></td></tr></table>',
     '#required' => TRUE
  );
  /// $form[fees][fset]=array('#type'=>'fieldset','#title'=>'Your Credit Card Detail','#prefix'=>'<td>','#suffix'=>'</td></tr>');
  //$form[fees][cc]=array('#type'=>'textfield','#title'=>'CARD NUMBER','#size'=>'25','#prefix'=>'<td><table colspan="2" cellspan="2"><caption>CREDIT CARD PAYMENT</caption><tr><th>','#suffix'=>'</th>');
  //$form[fees][cpin]=array('#title'=>'CARD PIN','#type'=>'textfield','#size'=>'5','#prefix'=>'<tr><td>','#suffix'=>'</td></tr>');
  //$form[fees]['ed']=array('#type'=>'ccdt','#title'=>'EXPIRY DATE','#prefix'=>'<tr><td>','#suffix'=>'</td></tr></table></td></tr></table>');
  //if(is_array($state[storage][values][3]))
  //assign_keys($form,$state[storage][values][3]);
   $form['jambsubp'] = array('#id' => 'edit-previous', '#value' => 'Previous', '#type' => 'submit');
   $form['jambsubn'] = array('#id' => 'edit-next', '#value' => 'Next', '#type' => 'submit');
   $form['#multistep'] = TRUE;
   $form['#redirect'] = FALSE;
   return $form;
}

function _student_registration_form7_etranzact($obj){
    $amt=variable_get('veritas_student_regfees1','200000');
    $amt=number_format($amt,2);

    $form[fees]=array('#type'=>'fieldset','#title'=>'Registration Fees');
    //$form[fees][mark]=array('#type'=>'item','#title'=>'Amount Payable','#value'=>'NGN '.$amt);

    /// $form[fees][m]=array('#name'=>'m','#type'=>'radios','#options'=>array('1'=>'Bank Payment','2'=>'Card Payment'),'#title'=>'Payment Method','#required'=>1,'#default_value'=>1,'#attributes'=>array('disabled'=>'disabled'));

    //$form[fees][rno]=array('#type'=>'textfield','#size'=>45,'#title'=>'TELLER NUMBER','#prefix'=>'<table border="1" align="center"><tr><td><table colspan="2" cellspan="2" align="center"><caption>BANK PAYMENT INFORMATION</caption><tr><td>','#suffix'=>'</td></tr>' ,'#required'=>true);
    //$form[fees][cno]=array('#type'=>'textfield','#size'=>45,'#title'=>'NAME','#prefix'=>'<tr><td>','#suffix'=>'</td></tr></table></td></tr></table>','#required'=>true);
    $form[fees][rno]=array('#type'=>'textfield','#size'=>45,'#title'=>'RECEIPT NUMBER','#prefix'=>'<table border="1" align="center"><tr><td><table colspan="2" cellspan="2" align="center"><caption>ETRANZACT PAYMENT INFORMATION</caption><tr><td>','#suffix'=>'</td></tr>' ,'#required'=>true);
    $form[fees][cno]=array('#type'=>'textfield','#size'=>45,'#title'=>'CONFIRMATION NUMBER','#prefix'=>'<tr><td>','#suffix'=>'</td></tr>','#required'=>true);
    $form[fees][amt]=array('#type'=>'textfield','#size'=>45,'#title'=>'PAYMENT AMOUNT','#prefix'=>'<tr><td>','#suffix'=>'</td></tr></table></td></tr></table>','#required'=>true);

    /// $form[fees][fset]=array('#type'=>'fieldset','#title'=>'Your Credit Card Detail','#prefix'=>'<td>','#suffix'=>'</td></tr>');

    //$form[fees][cc]=array('#type'=>'textfield','#title'=>'CARD NUMBER','#size'=>'25','#prefix'=>'<td><table colspan="2" cellspan="2"><caption>CREDIT CARD PAYMENT</caption><tr><th>','#suffix'=>'</th>');
    //$form[fees][cpin]=array('#title'=>'CARD PIN','#type'=>'textfield','#size'=>'5','#prefix'=>'<tr><td>','#suffix'=>'</td></tr>');

    //$form[fees]['ed']=array('#type'=>'ccdt','#title'=>'EXPIRY DATE','#prefix'=>'<tr><td>','#suffix'=>'</td></tr></table></td></tr></table>');
    //if(is_array($state[storage][values][3]))
    //assign_keys($form,$state[storage][values][3]);

    $form['jambsubp']=array('#id'=>'edit-previous','#value'=>'Previous','#type'=>'submit');
    $form['jambsubn']=array('#id'=>'edit-next','#value'=>'Next','#type'=>'submit');

    $form['#multistep']=true;
    $form['#redirect']=false;

    return $form;
}

function _student_reg_form6($obj) {

   $amt = variable_get('veritas_student_regfees', '1000');
   $amt = number_format($amt, 2);
   $form['fees'] = array('#type' => 'fieldset', '#title' => 'Registration Fees');
   $form['fees']['mark'] = array('#type' => 'item', '#title' => 'Amount Payable', '#value' => 'NGN '. $amt);
   /// $form[fees][m]=array('#name'=>'m','#type'=>'radios','#options'=>array('1'=>'Bank Payment','2'=>'Card Payment'),'#title'=>'Payment Method','#required'=>1,'#default_value'=>1,'#attributes'=>array('disabled'=>'disabled'));
   $form['fees']['rno'] = array(
     '#type' => 'textfield',
     '#size' => 45,
     '#title' => 'TELLER NUMBER',
     '#prefix' => '<table border="1" align="center"><tr><td><table colspan="2" cellspan="2" align="center"><caption>BANK PAYMENT INFORMATION</caption><tr><td>',
     '#suffix' => '</td></tr>',
     '#required' => TRUE
    );
   $form['fees']['cno'] = array(
     '#type' => 'textfield',
     '#size' => 45,
     '#title' => 'NAME',
     '#prefix' => '<tr><td>',
     '#suffix' => '</td></tr></table></td></tr></table>',
     '#required' => TRUE
   );
  /// $form[fees][fset]=array('#type'=>'fieldset','#title'=>'Your Credit Card Detail','#prefix'=>'<td>','#suffix'=>'</td></tr>');

  //$form[fees][cc]=array('#type'=>'textfield','#title'=>'CARD NUMBER','#size'=>'25','#prefix'=>'<td><table colspan="2" cellspan="2"><caption>CREDIT CARD PAYMENT</caption><tr><th>','#suffix'=>'</th>');
  //$form[fees][cpin]=array('#title'=>'CARD PIN','#type'=>'textfield','#size'=>'5','#prefix'=>'<tr><td>','#suffix'=>'</td></tr>');

   //$form[fees]['ed']=array('#type'=>'ccdt','#title'=>'EXPIRY DATE','#prefix'=>'<tr><td>','#suffix'=>'</td></tr></table></td></tr></table>');
  //if(is_array($state[storage][values][3]))
  //assign_keys($form,$state[storage][values][3]);
   $form['jambsubp'] = array('#id' => 'edit-previous', '#value' => 'Previous', '#type' => 'submit');
   $form['jambsubn'] = array('#id' => 'edit-next', '#value' => 'Next', '#type' => 'submit');
   $form['#multistep'] = TRUE;
   $form['#redirect'] = FALSE;
   return $form;
}

function _student_registration_form5($obj) {
   $ahah_binding = array(
     'url'   => url('student/accomodation/validate'),
     'event' => 'change',
     'wrapper' => 'message_id',
     'selector' => '#edit-hostel-1',
     'effect'   => 'slide',
     'method'   => 'replace',
     'progress' => array('type' => 'throbber')
   );
   drupal_add_js('misc/jquery.form.js');
   drupal_add_js('misc/ahah.js');
   drupal_add_js(array('ahah' => array($element['#id'] => $ahah_binding)), 'setting');
   $amt = variable_get('veritas_student_regfees', '1000');
   $amt = number_format($amt, 2);
   $r = db_query("select * from {programme} p inner join {admitted_student} s on s.first_choice=p.programme_id inner join {department} d on d.department_id = p.department_id  where  s.first_choice = ". $_SESSION['student']['data']->first_choice);
   $f = db_fetch_object($r);
   $r = db_query("select * from {department} where college_id='". $f->college_id ."'");
   $departments[] = 'Select Department';
   while ($s = db_fetch_object($r)) {
     $departments[$s->department_id] = $s->department_name;
   }
   $form['fees'] = array('#type' => 'fieldset', '#title' => 'Accomodation');
 //$form[fees][mark]=array('#type'=>'item','#title'=>'Amount Payable','#value'=>'NGN '.$amt);
  //$form[fees]['college']=array('#type'=>'select','#default_value'=>1,'#options'=>_student_col(),'#title'=>'College','#theme'=>'hidden');
   $form['college'] = array(
     '#default_value' => $f->college_id,
     '#type' => 'select',
     '#options' => _student_col(),
     '#title' => 'College',
     '#ahah' => array('event' => 'change', 'wrapper' => 'department_id', 'path' => 'student/ajaxlga/department', 'method' => 'html'),
     '#required' => TRUE
    );
    $form['department_id'] = array(
       '#default_value' => $f->department_id,
       '#type' => 'select',
       '#options' => $departments ,
       '#title' => 'Select Department',
       '#prefix' => '<div id="department_id">',
       '#suffix' => '</div>',
       '#attributes' => array('class' => 'form-select'),
       '#required' => TRUE
    );
    $form['accomodation_type'] = array(
      '#type' => 'select',
      '#options' => veritas_accomodation_types(),
      '#title' => 'Select Accommodation Type',
      '#ahah' => array('event' => 'change', 'wrapper' => 'hostel_id', 'path' => 'student/ajaxlga/accomodation', 'method' => 'html'),
      '#required' => TRUE,
      '#attributes' => array('class' => 'form-select')
    );
    $form['hostel'] = array(
      '#type' => 'select',
      '#default_value' => 0,
      '#options' => array('Select Hostel'),
      '#title' => 'Select Hostel',
      '#prefix' => '<div id="hostel_id">',
      '#suffix' => '</div>',
      '#attributes' => array('class' => 'form-select'),
      '#ahah1' => array('event' => 'change', 'wrapper' => 'message_id', 'path' => 'student/accomodation/validate', 'method' => 'html')
    );
    $form['mark'] = array(
      '#type' => 'item',
      '#prefix' => '<div id="message_id">',
      '#suffix' => '</div>',
      '#title' => '',
      '#value' => ''
    );
/// $form[fees][m]=array('#name'=>'m','#type'=>'radios','#options'=>array('1'=>'Bank Payment','2'=>'Card Payment'),'#title'=>'Payment Method','#required'=>1,'#default_value'=>1,'#attributes'=>array('disabled'=>'disabled'));

 //$form[fees][rno]=array('#type'=>'textfield','#size'=>45,'#title'=>'TELLER NUMBER','#prefix'=>'<table border="1" align="center"><tr><td><table colspan="2" cellspan="2" align="center"><caption>BANK PAYMENT INFORMATION</caption><tr><td>','#suffix'=>'</td></tr>' ,'#required'=>true);
 //$form[fees][cno]=array('#type'=>'textfield','#size'=>45,'#title'=>'NAME','#prefix'=>'<tr><td>','#suffix'=>'</td></tr></table></td></tr></table>','#required'=>true);
/// $form[fees][fset]=array('#type'=>'fieldset','#title'=>'Your Credit Card Detail','#prefix'=>'<td>','#suffix'=>'</td></tr>');

  //$form[fees][cc]=array('#type'=>'textfield','#title'=>'CARD NUMBER','#size'=>'25','#prefix'=>'<td><table colspan="2" cellspan="2"><caption>CREDIT CARD PAYMENT</caption><tr><th>','#suffix'=>'</th>');
 //$form[fees][cpin]=array('#title'=>'CARD PIN','#type'=>'textfield','#size'=>'5','#prefix'=>'<tr><td>','#suffix'=>'</td></tr>');

 //$form[fees]['ed']=array('#type'=>'ccdt','#title'=>'EXPIRY DATE','#prefix'=>'<tr><td>','#suffix'=>'</td></tr></table></td></tr></table>');
 //if(is_array($state[storage][values][3]))
 //assign_keys($form,$state[storage][values][3]);

   $form['jambsubp'] = array('#id' => 'edit-previous', '#value' => 'Previous', '#type' => 'submit');
   $form['jambsubn'] = array('#id' => 'edit-next', '#value' => 'Next', '#type'=>'submit', '#disabled' => TRUE);
   $form['#multistep'] = TRUE;
   $form['#redirect'] =  FALSE;
   return $form;
}

function _student_registration_form6($obj) {

   drupal_add_js("function student_disable(t){if(t.value=='normal') {document.getElementById('edit-disability').disabled='disabled';  } else    {document.getElementById('edit-disability').disabled =false;}}",'inline');
   $form['#attributes'] = array('enctype' => "multipart/form-data");
   $form['mark'] = array('#value' => '<b>OTHER INFORMATION</b>');
   $form['pic'] = array(
      '#type' => 'file',
      '#title' => 'Upload Passport Picture'
   );
   $amt = variable_get('veritas_student_regfee', 10);
   $form['signature'] = array(
      '#type' => 'file',
      '#title' => 'Upload Signature Photo'
   );
   $amt = variable_get('veritas_student_regfee', 10);
   $form['jambsubp'] = array('#id' => 'edit-previous', '#value' => 'Previous', '#type' => 'submit');
   $form['jambsubn'] = array('#id' => 'edit-next', '#value' => 'Next', '#type' => 'submit');
   $form['#multistep'] = TRUE;
   $form['#redirect'] = FALSE;
   return $form;
}

function _student_reg_form4($obj) {

   drupal_add_js("function student_disable(t){if(t.value=='normal') {document.getElementById('edit-disability').disabled='disabled';  } else {document.getElementById('edit-disability').disabled =false;}}",'inline');
   $form['#attributes'] = array('enctype' => "multipart/form-data");
   $form['mark'] = array('#value' =>'<b>OTHER INFORMATION</b>');
   $form['physical'] = array(
      '#type' => 'radios',
      '#options' => array('normal' => 'Normal', 'disabled' => 'Disabled' ),
      '#title' => 'PHYSICAL HEALTH STATUS',
      '#required' => TRUE,
      '#attributes' => array('onchange' => 'student_disable(this)'),
      '#default_value' => 'normal'
   );
   $form['disability'] = array(
      '#id' => 'edit-disability',
      '#title' => 'DISABILITY',
      '#type' =>'select',
      '#options' => array('blind' => 'Blind', 'dumb' => 'Dumb', 'deafdumb' => 'Deaf & Dumb', 'other' => 'Other'),
      '#disabled' => 'disabled',
      '#attributes' => array('class' => 'form-select')
   );
   $form['pic'] = array('#type' => 'file', '#title' => 'UPLOAD PASSPORT PICTURE');
   $amt = variable_get('veritas_student_regfee',10);
   $form['dec'] = array(
     '#type' => 'checkbox',
     '#title' => 'Agree',
     '#prefix' => '<p>DECLARATION:
<font color="#1f497d"></font> I, hereby declare that all the information given
in this form is, to the best of my knowledge and belief, correct. Any
false or incomplete information given in this form will automatically
disqualify me from being considered for admission to, or continuing with any course of study in
the University. I shall accept as final the decision of the University with regard to my course(s) of study, and placement.'
   );
   $form['jambsubp'] = array('#id' => 'edit-previous', '#value' => 'Previous', '#type' => 'submit');
   $form['jambsubn'] = array('#id' => 'edit-next', '#value' => 'Next', '#type' => 'submit');
   $form['#multistep'] = TRUE;
   $form['#redirect'] = FALSE;
   return $form;
}


function _student_registration_form4($obj) {

   drupal_add_js("function student_disable(t){if(t.value=='normal') {document.getElementById('edit-disability').disabled='disabled';  } else {document.getElementById('edit-disability').disabled =false;}}",'inline');
   $form['#attributes'] = array('enctype' => "multipart/form-data");
   $form['medical_part1'] = array('#type' => 'fieldset', '#title' => 'Medical Information Part I');
   $form['medical_part1'][state_of_health] = array(
     '#type' => 'radios',
     '#options' => array('good' => 'good', 'fair' => 'fair', 'poor' =>poor ),
     '#title' => 'State of Health',
     '#required' => TRUE
   );
   $form['medical_part1']['ever_hospital'] = array(
     '#type' => 'radios',
     '#options' => array('1' => 'Yes', '0' => 'No'),
     '#title' => 'Ever Been Admitted as an in-patient Into Hospital? ',
     '#required' => TRUE
   );
   $form['medical_part1']['diseases'] = array('#type' => 'fieldset', '#title' => '<b>If yes fill the following fields:</b>');
   $form['medical_part1']['diseases'][tuberculosis]=array(
    '#type' => 'radios',
    '#options' => array('1' => 'Yes', '0' => 'No'),
    '#title' => 'Tuberculosis'
   );
   $form['medical_part1']['diseases']['schistosomiasis'] = array(
      '#type' => 'radios',
      '#options' => array('1' => 'Yes', '0' => 'No' ),
      '#title' => 'Schistosomiasis'
   );
   $form['medical_part1']['diseases']['respiratory_disease'] = array(
      '#type' => 'radios',
      '#options' => array('1' => 'Yes', '0' => 'No' ),
      '#title' => 'Any respiratory disease'
   );
   $form['medical_part1']['diseases']['sickle'] = array(
      '#type' => 'radios',
      '#options' => array('1' => 'Yes', '0' => 'No' ),
      '#title' => 'Sickle cell disease'
   );
   $form['medical_part1']['diseases']['allergies'] = array(
      '#type' => 'radios',
      '#options' => array('1' => 'Yes', '0' => 'No' ),
      '#title' => 'Allergies'
   );
   $form['medical_part1']['diseases']['diabetes'] = array(
      '#type' => 'radios',
      '#options' => array('1' => 'Yes', '0' => 'No' ),
      '#title' => 'Diabetes'
   );
   $form['medical_part1']['diseases']['digestive'] = array(
       '#type' => 'radios',
       '#options' => array('1' => 'Yes', '0' =>'No'),
       '#title' => 'Any disease of digestive system disease'
   );
   $form['medical_part1']['diseases']['heart'] = array(
      '#type' => 'radios',
      '#options' => array('1' => 'Yes', '0' => 'No' ),
      '#title' => 'Any disease of the heart'
   );
   $form['medical_part1']['diseases']['urinary'] = array(
      '#type' => 'radios',
      '#options' => array('1' => 'Yes', '0' => 'No' ),
      '#title' => 'Any genito-urinary system system disease'
   );
   $form['medical_part1']['diseases']['nervous'] = array(
      '#type' => 'radios',
      '#options' => array('1' => 'Yes', '0' => 'No' ),
      '#title' => 'Nervous disease'
   );
   $form['medical_part1']['diseases']['deatils'] = array(
      '#type' => 'fieldset',
      '#title' => '<b>If answer to any of the above is yes, give details with dates</b>'
   );
   $form['medical_part1']['diseases']['deatils']['diseases_details'] = array('#type' => 'textarea', '#title' => '');
   $form['medical_part1']['diseases_not_in_form'] = array(
      '#type' => 'radios',
      '#options' => array('1' => 'Yes', '0' => 'No' ),
      '#title' => 'Is there any other medical condition you have not covered above'
   );
   $form['medical_part1']['diseases_not_details'] = array('#type' => 'textarea', '#size' => 45, '#title' => '');
   $form['medical_part1']['immune'] = array('#type' => 'fieldset', '#title' => '<b>Have you been immunised against any of the following:</b>');
   $form['medical_part1']['immune']['small_pox'] = array(
      '#type' => 'radios',
      '#options' => array('1' => 'Yes', '0' => 'No'),
      '#title' => 'Small pox ',
      '#required' => TRUE
   );
   $form['medical_part1']['immune']['small_pox'] = array(
      '#type' => 'radios',
      '#options' => array('1' => 'Yes', '0' => 'No'),
      '#title' => 'Small pox ',
      '#required' => TRUE
   );
   $form['medical_part1']['immune']['tetanus'] = array(
      '#type' => 'radios',
      '#options' => array('1' => 'Yes', '0' => 'No'),
      '#title' => 'Tetanus ',
      '#required' => TRUE
   );
   $form['medical_part1']['immune']['yellow_fever'] = array(
      '#type' => 'radios',
      '#options' => array('1' => 'Yes', '0' => 'No'),
      '#title' => 'Yellow fever',
      '#required' => TRUE
   );
   $form['medical_part1']['immune']['hepatitis_b'] = array(
      '#type' => 'radios',
      '#options' => array('1' => 'Yes', '0' => 'No'),
      '#title' => 'Hepatitis B',
      '#required' => TRUE
   );
   $form['medical_part1']['immune']['other'] = array(
      '#type' => 'radios',
      '#options' => array('1' => 'Yes', '0' => 'No'),
      '#title' => 'Other',
      '#required' => TRUE
   );
   $form['medical_part1']['blood_group'] = array(
      '#type' => 'select',
      '#options' => array('O+' => 'O+', 'O-' => 'O-', 'A+' => 'A+','A-' => 'A-', 'B+' => 'B+', 'B-' => 'B-', 'AB+' => 'AB+', 'AB-' => 'AB-') ,
      '#title' => 'Blood Group',
      '#required' => TRUE
   );
   $form['jambsubp'] = array('#id' => 'edit-previous', '#value' => 'Previous', '#type' => 'submit');
   $form['jambsubn'] = array('#id' => 'edit-next', '#value' => 'Next', '#type' => 'submit');
   $form['#multistep'] = TRUE;
   $form['#redirect'] = FALSE;
   return $form;
}

function student_login_form_validate($form,&$states) {

  //echo  "select * from student where jambno = '".$form['#post']['jamb_no']."' and Admitted = 'Yes'" ; die ;
  $result = db_query("select * from {student} where jambno = '%s' and Admitted = 'Yes'", $form['#post']['jamb_no']);
  if ($data = db_fetch_object($result)) {
     if (($form['#post']['dob']['month']/10)< 1) {
        $form['#post']['dob']['month'] = "0". $form['#post']['dob']['month'];
     }
     if (($form['#post']['dob']['day']/10) < 1) {
        $form['#post']['dob']['day'] = "0". $form['#post']['dob']['day'];
     }
     $dob = $form['#post']['dob']['year'] ."-". $form['#post']['dob']['month'] ."-". $form['#post']['dob']['day'];
     if (strtotime($dob) == strtotime($data->dob)) {
        $_SESSION['student']['id'] = $data->student_id;
        $_SESSION['student']['data'] = $data;
     }
     else {
        form_set_error('submitted[jamb_no]', "Date of birth not valid");
     }

   }
   else {
     form_set_error('submitted[jamb_no]', "Jamb not valid");
   }
}

function student_registration_form_validate($form, &$state) {

  //echo "enter"; die;
  if ($state['clicked_button']['#id'] == 'edit-previous') {
     $state['storage']['values'][$state['storage']['step']] = $state['values'];
     $nextstep = $state['storage']['step'] - 1;
     return TRUE;
  }
  if ($state['storage']['step'] == 5) {
    $values = $state['values'];
    if ($values['college'] == 0 || $values['college'] == '') {
       form_set_error('college', 'College is required');
    }
    if ($values['accomodation_type'] == 0 || $values['accomodation_type'] == '') {
      form_set_error('accomodation_type', 'Accomodation type is required');
    }
    if ($values['hostel'] == 0 || $values['hostel'] == '') {
      form_set_error('hostel','Hostel is required');
    }
    else {
       $query = "select count(*) as bookings from {admitted_student_accomodation} where hostel_id='". $values['hostel'] ."'";
       $result = db_query($query);
       $bookings = db_result($result);
       $query = "select  space from {accomodation_hostels} where id ='". $values['hostel'] ."' ";
       $result = db_query($query);
       $spaces = db_result($result);
       if ($bookings >= $spaces) {
          form_set_error('accomodation_type', 'No space avaliable');
       }
   }
  }
  if ($state['storage']['step'] == 7) {
     $values = $state['values'];
     $query = "select * from {payment} where refno = '%s' and paid=0 ";
     $result = db_query($query, $values['rno']);
     $data = db_fetch_object($result);
     if (!$data) {
        form_set_error('rno', "Teller  No  not valid.");
     }
     else {
       //if($data->cr < 200000){
       //form_set_error('rno',"Amount less then 200000 is not accepted.");
      //}
     }
  }
  if ($state['storage']['step'] == 3) {
     $values = $state['values'];
     $v = $values;
     $d = array();
     for ($i = 1; $i <= 9; $i++) {
        $s = "s1$i";
        $g = "g1$i";
        if ($v[$s]) {
           $d[] = $v[$s];
           if (!(int)$v[$g]) {
              form_set_error($g, 'Enter Grade');
           }
        }
     }
     if (count(array_unique($d)) < 6) {
        form_set_error("", "Must have alteast 6 different subjects") ;
     }
     if (count(array_unique($d)) != count($d)) {
        form_set_error("", "Duplicate subjects entered.") ;
     }
     $d = array();
     if ($v[nos] == 2) {
         if (!$v['ec2']) {
            form_set_error('ec2', 'Enter Exam Center');
         }
         if (!$v['ebd2']) {
            form_set_error('ebd2', 'Enter Exam Body');
         }
         if (!$v[eno2]) {
            form_set_error('eno2', 'Enter Exam Number');
         }
         for ($i = 1; $i <= 9; $i++) {
            $s = "s2$i";
            $g = "g2$i";
            if ($v[$s]) {
               $d[] = $v[$s];
               if (!(int)$v[$g]) {
                 form_set_error($g, 'Enter Grade');
               }
            }
         }
         if (count(array_unique($d)) < 6) {
            form_set_error("", "Must have alteast 6 different subjects") ;
         }
         if(count(array_unique($d)) != count($d)) {
            // var_dump($d);
            form_set_error("", "Duplicate subjects entered.") ;
         }
     }
  }

  global $user;
  if ($state['clicked_button']['#id'] == 'edit-previous') {
     $state['storage']['values'][$state['storage']['step']] = $state['values'];
     $nextstep = $state['storage']['step'] - 1;
    // return;
  }
  elseif ($state['clicked_button']['#id'] == 'edit-next') {
     $state['storage']['values'][$state['storage']['step']] = $state['values'];
     $nextstep=  $state['storage']['step']+1;
  }
   return;
}

function student_reg_form_validate($form, &$state) {

  global $user;
  if ($state['clicked_button']['#id'] == 'edit-previous') {
     $state['storage']['values'][$state['storage']['step']] = $state['values'];
     $nextstep = $state['storage']['step'] - 1;
     return;
  }
  elseif ($state['clicked_button']['#id'] == 'edit-next') {
     $state['storage']['values'][$state['storage']['step']] = $state['values'];
     $nextstep = $state['storage']['step'] + 1;
  }
  $v = $state['values'];
  if ($nextstep == 2) {
     if(!$v[q]) {
       form_set_error("You must confirm that you have the required payment information.");
       return;
      }
      if (!$v[email]) {
         form_set_error('email', 'Email is required');
      }
      if (!veritas_validuser($v['email'], $v['email']))
         return false;
      if ($v['nat'] ==  156 && !$v['state']) {//only applicable for nigeria
         form_set_error('state', 'Required State of origin');
      }
      if (!$v['astate']) {
         form_set_error('state', 'Required Address State');
      }
      if ($v['state'] && !$v['lga'])
         form_set_error('lga', 'Required LGA');
      else if (!$v['alga'])
         form_set_error('alga', 'Required Address LGA');
   }
   else if ($nextstep == 3) {
      if (!_student_check_course($v['col1'], $v['dep1'], $v['course1']) || !_student_check_course($v['col2'] ,$v['dep2'] ,$v['course2'])) {
         form_set_error('', 'Enter Proper college/department/course combination');
      }
     if (count(array_unique(array($v['s2'], $v['s3'], $v['s4']))) < 3 || !($v['s2'] && $v['s3'] && $v['s4'])) {
       form_set_error('', 'Enter differnt subjects');
     }
   }
   else if ($nextstep == 4) {
       if (!$v['ebd1']) {
          form_set_error('ebd1', 'Enter Exam Body');
       }
       $d = array();
       for($i = 1; $i < 9;$i++) {
          $s = "s1$i";
          $g = "g1$i";
          if ($v[$s]) {
            $d[] = $v[$s];
            if (!(int)$v[$g]) {
               form_set_error($g, 'Enter Grad');
            }
          }
       }
       if (count(array_unique($d)) < 6) {
          form_set_error("", "Must have alteast 6 different subjects") ;
       }
       if(count(array_unique($d)) != count($d)) {
         form_set_error("", "Duplicate subjects entered.") ;
       }
       $d = array();
       if ($v['nos'] == 2) {
          if (!$v['ec2']) {
             form_set_error('ec2', 'Enter Exam Center');
          }
          if (!$v['ebd2']) {
             form_set_error('ebd2', 'Enter Exam Body');
          }
          if (!$v['eno2']) {
             form_set_error('eno2', 'Enter Exam Number');
          }
         for ($i = 1; $i <= 9; $i++) {
            $s = "s2$i";
            $g = "g2$i";
              if ($v[$s]) {
                 $d[] = $v[$s];
                 if (!(int)$v[$g]) {
                    form_set_error($g, 'Enter Grade');
                 }
              }
         }
         if (count(array_unique($d)) < 6) {
           form_set_error("", "Must have alteast 6 different subjects") ;
         }
         if (count(array_unique($d)) != count($d)) {
           // var_dump($d);
           form_set_error("","Duplicate subjects entered.") ;
         }
      }
    }
    else if ($nextstep == 5) {
      if (!$v['dec']) {
          form_set_error('dec', "You must accept the agreement");
          return;
      }
      $f8 = veritas_check_upload('pic');
      if ($f8) {
         form_set_error('pic','Picture cannot be uploaded '. $f8);
      }
     //else
     ///$state[storage][file]=$f8->fid;
        return;
    }
    else if ($nextstep == 6) {
      $type = 'Student Registration';
      //$state['storage']['transid'] = $transid = uniqid("s");
      // The transaction id is a unique reference for the transactions
      // and should either be auto generated or supplied by the student
      $state['storage']['transid'] = $transid = $state['values']['rno'];
      $descr = "Student Registration Fees";
      $m = $_POST['mothod'];
      $val1 = $state['values'];
      $m = $val1['m'];
      $em = $val1['ed']['em'];
      $ey = $val1['ed']['ey'];
      $em = sprintf("%02d", $em);
      $mail = $state['storage']['values'][1]['email'];
      $name = $state['storage']['values'][1]['fname'] .' '. $state['storage']['values'][1]['mname']. $state['storage']['values'][1]['lname'];
      $amt = variable_get('veritas_student_regfees', 1000);
      $m = 1;
      if ($m ==2 ) {
        if (!$val1['cc'] || !$val1['cpin']) {
          form_set_error('', 'Invalid Credit Card Details');
          return;
        }
        $s = veritas_pay_cc($val1['cc'], $val1['cpin'], $em, $ey, $amt, $descr, $transid, $name, $mail, 'sreg');
        }
        else if ($m == 1) {
           $cno = $val1['cno'];
           $rno = $val1['rno'];
           if (!$cno || !$rno) {
              form_set_error('cno', 'Invalid payment details');
              return;
           }
           $s = veritas_pay_pin($rno, $cno, $amt, $descr, $transid, $name, $mail, 'sreg');
       }
       else {
           form_set_error('method', 'Choose payment method');
           return;
       }
       if ( $s > 0) {
          form_set_error('', "Invalid payment information.");
          return;
       }
       else if ($s < 0) {
           form_set_error('', 'Transaction processing error. please try later or contact admin');
           return;
       }
     }
}

function _student_check_course($col, $dep, $c) {
  $rc = db_query("select p.programme_id,d.college_id,d.department_id from {programme} p inner join {department} d on(d.department_id=p.department_id) inner join {college} c  on (d.college_id=c.college_id) where p.programme_id=%d  ",$c);
  $fc = db_fetch_object($rc);
  if ($fc->department_id == $dep && $fc->college_id == $col && $col && $dep) {
     return true;
  }
  return true;
}

function student_reg_form_submit($form,&$state){
 if ($state['clicked_button']['#id']=='edit-previous') {
      $state['storage']['step']--;
          $state['#rebuild']=true;

      return;
    } elseif ($state['clicked_button']['#id']=='edit-next') {
       $state['storage']['values'][$state['storage']['step']] = $state['values'];
       $state['storage']['step']++;
    }else
    return;
    $nextstep =   $state['storage']['step'];

    $state['#rebuild'] = TRUE;
    if ($nextstep == 5) {
      if($state['values']['physical'] == 'disabled'){
      }
      $f8 = file_save_upload('pic', array(), '', FALSE);
      if (!$f8) {
        drupal_set_message('Picture cannot be uploaded ');
        return;
      }
      $state['storage']['file'] = $f8->fid;
    }
    if ($nextstep == 3) {
//     $state[storage][values][3][course1]=(int)$_POST[course1];
 //    $state[storage][values][3][course2]=(int)$_POST[course2];

    }
   if ($nextstep == 6) {
     $val = $state['storage']['values'][1];
///var_dump($state[storage][values]);
     $transid = $state['storage']['transid'];
     if (!$transid) {
       drupal_set_message('Registration cannot be done . please contract admin');
       drupal_goto('veritas/error');
     }
     $type = 'sreg';
     $acc = veritas_user_save($type, $val['email'], $transid);
     $uid = $acc->uid;
     if ($uid) {
       $f = $state['storage']['file'];
       if ($f) {
         $fs  =new stdClass();
         $fs->fid = $f;
         file_set_status($fs, FILE_STATUS_PERMANENT);
       }
       student_add($uid, $state['storage']['values'], $f);
       $t = db_query("select {transaction_id} from transaction where receipt_no='%s'", $transid);
       $f = db_fetch_object($t);
       drupal_goto('veritas/receipt/'. $f->transaction_id);
     }
     else {
       drupal_set_message('Registration cannot be done . please contract admin');
       drupal_goto('veritas/error');
    }
  }
}

function add_student_medical_details($form) {

  $values = $form['medical_part1']['state_of_health']['#post'] ;
  if ($values['diseases_not_in_form'] == 1) {
    $diseases_details = mysql_real_escape_string ($values['diseases_not_details'] );
  }
  else {
   $diseases_details=mysql_real_escape_string ($values['diseases_details']) ;
  }
  $key_pairs = array(
    'health_status' => $values['state_of_health'],
    'addmitted_hospital' => $values['ever_hospital'],
    'details' => $diseases_details,
    'disease_not_covered' => $values['diseases_not_in_form'],
    'small_pox' => $values['small_pox'],
    'tetanus' => $values['tetanus'],
    'yellow_fever' => $values['yellow_fever'],
    'hepatitis_b' => $values['hepatitis_b'],
    'blood_group' => $values['blood_group'],
    'health_status' => $values['state_of_health'],
    'tuberculosis' => $values['tuberculosis'],
    'schistosomiasis' => $values['schistosomiasis'],
    'respiratory_disease' => $values['respiratory_disease'],
    'sickle' => $values['sickle'],
    'allergies' => $values['allergies'],
    'diabetes' => $values['diabetes'],
    'digestive' => $values['digestive'],
    'heart' => $values['heart'],
    'genito_urinary' => $values['urinary'],
    'nervous' => $values['nervous'],
    'student_id' => $_SESSION['student']['data']->student_id
  );
  foreach ($key_pairs as $key => $value){
     $query[] = $key ." = '". $value ."'";
  }
  $query = implode(",", $query);
  $sql = "insert into {student_medical_details} set ". $query;
  db_query($sql);
}

function add_exam_detail($form) {

  $values =  $form['mark']['#post'];
  $query = "delete from {admitted_ext_exam_record} where exam_student_id=". $_SESSION['student']['data']->student_id;
  db_query($query);
  $query = " DELETE ad FROM {admitted_ext_exam_detail} ad LEFT JOIN {admitted_ext_exam_record} ar ON ar.ext_exam_rec_id = ad.ext_exam_record_id WHERE ar.exam_student_id =". $_SESSION['student']['data']->student_id ." AND ar.ext_exam_rec_id IS NULL ";
  db_query($query);
  $query = "insert into {admitted_ext_exam_record} set exam_date = '%s' , exam_center_name = '%s' , exam_number='%s' , exam_body='%s' , exam_student_id = '%s' " ;
  $edate1 = $values['edate1']['year'] ."-". $values['edate1']['month'] ."-". $values['edate1']['day'];
  db_query( $query , $edate1  , $values['ec1'] , $values['eno1'] , $values['ebd1'] , $_SESSION['student']['data']->student_id);
  $eid=db_last_insert_id('admitted_ext_exam_record','ext_exam_record_id');
  for ($i = 1; $i <= 9; $i++) {
     $subject = "s1". $i;
     $grade = "g1". $i;
     if ($values[$subject] != "" && $values[$subject] > 0) {
        $subject  = $values[$subject];
        $grade  = $values[$grade];
        $query = "insert {admitted_ext_exam_detail} set ext_exam_record_id = '%s' , subject_id='%s' , grade_id='%s' ";
        db_query($query, $eid, $subject, $grade);
     }
  }
  if ($values['nos'] > 1) {
      $edate2 = $values['edate2']['year'] ."-". $values['edate2']['month'] ."-". $values['edate2']['day'];
      db_query( $query , $edate2  , $values['ec2'] , $values['eno2'] , $values['ebd2'] , $_SESSION['student']['data']->student_id);
      $eid = db_last_insert_id('admitted_ext_exam_record', 'ext_exam_record_id');
      for ($i = 1; $i <= 9; $i++) {
         $subject = "s1". $i;
         $grade = "g1". $i;
         if (isset($values[$subject]) && $values[$subject] != "" && $values[$subject] > 0) {
             $query = "insert {admitted_ext_exam_detail} set ext_exam_record_id = '%s' , subject_id='%s' , grade_id='%s' ";
             db_query($query, $eid, $values[$subject], $values[$grade]);
         }
      }
  }
}

function make_transaction($form) {

  $query = "select receipt_no from {admitted_transaction} WHERE student_id ='%s' and trans_type='sfee' order by transaction_id desc ";
  $result = db_query($query, $_SESSION['student']['data']->student_id);
  $data = db_result($result);
  if (!$data) {
    $update = TRUE;
    $receipt_no = "";
  }
  else {
    $update = FALSE;
    $temp_arr = explode("-", $data);
    $val = $temp_arr[1] + 1;
    $receipt_no = $temp_arr[0] ."-". $val;
  }
  $query = "select * from {payment} where refno = '%s'";
  $result = db_query($query, $form['fees']['rno']['#post']['rno']);
  $data = db_fetch_object($result);
  $query = "insert into {admitted_transaction} set student_id ='%s' , receipt_no='%s' , payment_code='%s', trans_amount='%s', bank_code='%s',trans_type='sfee' , trans_time=now()";
  db_query($query, $_SESSION['student']['data']->student_id, $receipt_no, $form['fees']['rno']['#post']['rno'], $data->cr, $form['fees']['rno']['#post']['rno']);
  $trid = db_last_insert_id('admitted_transaction', 'transaction_id');
  if ($update) {
    $receipt_no = vsprintf("%06d", array($trid)) ."-1";
    $query = "update {admitted_transaction} set receipt_no='%s' where transaction_id='%s'";
    $result = db_query($query, $receipt_no, $trid);
  }
  $mat_number = "VUG". vsprintf("%04d", array($_SESSION['student']['data']->student_id)) ;
  $query = "update {payment} set paid = 1 , description = '%s' where refno = '%s'";
  $result = db_query($query, $mat_number, $form['fees']['rno']['#post']['rno']);
  return $trid;
}

function add_kin($form) {

  $query = "select * from {admitted_next_of_kin} where student_id = '". $_SESSION['student']['data']->student_id ."'";
  $result = db_query($query);
  if (FALSE !== db_result($result)) {
     $query = " update ";
     $where = " where student_id = '". $_SESSION['student']['data']->student_id ."' ";
  }
  else{
    $query = "insert into ";
  }
  $query .=  " {admitted_next_of_kin} set
    title = '". $form['kin']['title']['#post']['title'] ."' ,
    name  = '". mysql_real_escape_string($form['kin']['title']['#post']['kname']) ."',
    relationship = '". $form['kin']['title']['#post']['krel'] ."' ,
    address1 = '". $form['kin']['title']['#post']['kadd'] ."' ,
    city = '". $form['kin']['title']['#post']['kcity'] ."' ,
    telephone = '". $form['kin']['title']['#post']['ktel'] ."' ,
    mobile = '". $form['kin']['title']['#post']['kmobile'] ."' ,
    student_id = '". $_SESSION['student']['data']->student_id ."'
    ". $where;
    db_query($query);
    if ($form['kin']['title']['#post']['sname'] != "") {
      $query = "select * from admitted_sponsor where student_id = '". $_SESSION['student']['data']->student_id ."'";
      $result = db_query($query);
      if (FALSE !== db_result($result)) {
         $query = " update ";
         $where = " where student_id = '". $_SESSION['student']['data']->student_id ."' ";
      }
      else {
         $query = "insert into ";
      }
      $query .=  " admitted_sponsor set
           name  = '". mysql_real_escape_string($form['kin']['title']['#post']['sname']) ."',
           address1 = '". $form['kin']['title']['#post']['sadd'] ."' ,
           city = '". $form['kin']['title']['#post']['scity'] ."' ,
           telephone = '". $form['kin']['title']['#post']['stel'] ."' ,
           mobile = '". $form['kin']['title']['#post']['smobile'] ."' ,
           student_id = '". $_SESSION['student']['data']->student_id ."'. $where
        ";
      db_query($query);
   }
}
function add_accomodation($form) {

   $query = "select * from {admitted_student_accomodation} where student_id = '". $_SESSION['student']['data']->student_id ."'";
   $result = db_query($query);
   if (FALSE !== db_result($result)) {
      $query = " update ";
      $where = " where student_id = '". $_SESSION['student']['data']->student_id ."' ";
    }
    else {
      $query = "insert into ";
    }
    $query =  $query ." {admitted_student_accomodation} set student_id='%s' , hostel_id='%s',college_id='%s' , department_id='%s'" ;
    db_query($query .$where, $_SESSION['student']['data']->student_id,$form['accomodation_type']['#post']['hostel'],$form['accomodation_type']['#post']['college'],    $form['accomodation_type']['#post']['department_id']);
}

function admit_student(&$form) {

   $value = $form['#parameters'][1]['values'];
   $query = "select * from {admitted_student} where student_id = '". $_SESSION['student']['data']->student_id ."'";
   $result = db_query($query);
   if (db_result($result)) {
     $query = "update {admitted_student} ";
     $where = " where student_id='". $_SESSION['student']['data']->student_id ."' ";
   }
   else {
     $query =  "insert into {admitted_student} select * , '". $form[course1]['#post']['maiden'] ."','','','','','','','','',0 from student WHERE student_id= ". $_SESSION['student']['data']->student_id ;
     db_query($query);
     $modes = _student_mode_of_entries('level_id');
     $query = "update {admitted_student} set pwd = dob , level_id = '". $modes[$value['mode']] ."'";
     $where = " where student_id='". $_SESSION['student']['data']->student_id ."' ";
     db_query($query.$where);
     return;
  }
  $modes = _student_mode_of_entries('level_id');
  $data = sprintf(" set yearofentry ='%s' , student_id='%s' , mode_of_entry = '%s' , jambno='%s' , title='%s' , last_name = '%s' , first_name='%s' , middle_name = '%s' , gender = '%s' , marital_status = '%s' , maiden_name = '%s' , nationality= '%s' , state_origin = '%s' ,lkup_lga_origin = '%s' , permanent_address1 = '%s' , permanent_address_city='%s', permanent_address_state = '%s' ,  contact_address ='%s' , contact_city = '%s' , contact_state='%s' , telephone = '%s' , mobile_number='%s' , email_address='%s' ,dob = '%s' , level_id='%s'

   ", $_SESSION['student']['data']->yearofentry , $_SESSION['student']['data']->student_id , $value['mode'] , $value['jam'] , $value['title'] , $value['lname'] , $value['fname'] , $value['mname'] , $value['sex'] , $value['mar'] , $value['maiden'] , $value['nat'] , $value['state'], $value['lga'], $value['address1'], $value['city'], $value['astate'], $value['caddress1'] , $value['ccity'], $value['castate'], $value['tel1'], $value['tel2'], $value['email'] ,$value['dob'],$modes[$value['mode']]);
   $query = $query . $data . $where;
   db_query($query);
}

function student_add($uid, $val, $f) {
   global $user;
   $a = $val[1];
   $b = $val[2];
   $c = $val[3];
   $d = $val[4];
/*
 *
CREATE TABLE `student` (
  `student_id` int(11) NOT NULL,
  `user_type_id` int(10) unsigned NOT NULL,
  `matriculation_no` varchar(20) NOT NULL,
  `first_name` varchar(30) NOT NULL,
  `last_name` varchar(30) NOT NULL,
  `middle_name` varchar(30) default NULL,
  `title` enum('Mr','Miss','Mrs') NOT NULL,
  `gender` set('male','female') NOT NULL,
  `dob` date NOT NULL,
  `nationality` varchar(30) NOT NULL default 'Nigeria',
  `lkup_lga_origin` varchar(30) NOT NULL,
  `marital_status` enum('single','married') NOT NULL,
  `religion` enum('christianity','islam','traditional','other') NOT NULL,
  `telephone` varchar(15) default NULL,
  `mobile_number` varchar(15) default NULL,
  `email_address` varchar(45) default NULL,
  `username` varchar(20) default NULL,
  `pwd` varchar(20) default NULL,
  `sponsor_name` varchar(45) default NULL,
  `mode_of_entry` enum('UME','DE','REM') default NULL,
  `jambno` varchar(20) default NULL,
  `yearofentry` int(10) unsigned default NULL,
  `permanent_address1` varchar(45) default NULL,
  `permanent_address_city` varchar(255) default NULL,
  `permanent_address_state` varchar(45) default NULL,
  `physical_health_status` enum('normal','disabled') default NULL,
  `sponsor_address` varchar(255) default NULL,
  `h_qualification` varchar(20) default NULL,
  `h_institution` varchar(45) default NULL,
  `h_date` varchar(20) default NULL,
  `mode_of_study` enum('Full_Time','Part_Time','Weekend','Evening','Sandwich','Ocassional','Correspondence','Distance_Learning') default NULL,
  `hobbies` varchar(45) default NULL,
  `disability` enum('Blind','Deaf','Dumb','Crippled','NA') default 'NA',
  `state_origin` varchar(30) default NULL,
  `nid` int(10) unsigned NOT NULL,
  PRIMARY KEY  (`student_id`),
  KEY `student_FKIndex1` (`user_type_id`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
 */
// $v=$val[storage][values][1];
   $a['dob1'] = $a['dob']['year'] .'-'. $a['dob']['month'] .'-'. $a['dob']['day'];
   $c['dst1a'] = $c['dst1']['em'] .'/'. $c['dst1']['ey'];
   $c['dst2a'] = $c['dst2']['em'] .'/'. $c['dst2']['ey'];
   $c['dena'] = $c['den1']['em'] .'/'. $c['den1']['ey'];
   $c['denb'] = $c['den2']['em'] .'/'. $c['den2']['ey'];
   if ($v['physical'] == 'normal') {
      $v['disability'] = '';
   }
   $rr = db_query("select * from {religion} where relegion_id=%d", $a['rel']);
   $fr = db_fetch_object($rr);
   $a['rel'] = $fr->religion_name;
   db_query("insert into {student} set student_id='%s',user_type_id='%d',matriculation_no='%s',first_name='%s',last_name='%s',middle_name='%s',title='%s'
 ,gender='%s',dob='%s',nationality='%s',lkup_lga_origin='%s',marital_status='%s',religion='%s',
 telephone='%s',mobile_number='%s',email_address='%s',
 sponsor_name='%s',mode_of_entry='%s',jambno='%s',yearofentry='%s',
 permanent_address1='%s',permanent_address_city='%s' ,permanent_address_state ='%s',
 h_qualification1='%s',h_institution1='%s',h_date1='%s',h_end1='%s',
 h_qualification2='%s',h_institution2='%s',h_date2='%s',h_end2='%s',
  physical_health_status='%s',sponsor_address='%s',
  mode_of_study='%s',hobbies='%s',disability='%s',state_origin='%s',pic_id='%s',subrel='%s',first_choice='%s',second_choice='%s'",$uid,$uid,$a[jam],
  $a['fname'], $a['lname'], $a['mname'], $a['title'],
  $a['sex'], $a['dob1'], $a['nat'], $a['lga'], $a['mar'], $a['rel'],
  $a['tel1'], $a['tel2'], $a['email'],
  'sponsorname' , $a['mode'] ,$a['jam'] ,date('Y'),
  $a['address1'] , $a['city'] ,$a['astate'],
  $c['q1'], $c['in1'], $c['dst1a'], $c['dena'],
  $c['q2'], $c['in2'], $c['dst2a'], $c[denb],
   $d['physical'],'aponsoradd',
  $a['mods'], $a['hob'], $d['disability'], $a['state'], $f, $a['subrel'], $b['course1'], $b['course2']);
 //$sid=db_last_insert_id('student','student_id');
   db_query("insert into {next_of_kin} set student_id='%s',name='%s',relationship='%s',
      address1='%s',city='%s',telephone='%s',mobile='%s'",
      $uid, $a['kname'], $a['krel'], $a['kadd'], $a['kcity'], $a['ktel'], 'mobile');
   $ed1 = $c['edate1']['year'] .'-'. $c['edate1']['month'] .'-'. $c['edate1']['day'];
   db_query("insert into {ext_exam_record} set exam_date='%s',exam_center_name='%s',exam_body='%s',exam_student_id='%s',exam_number='%s'"
    , $ed1, $c['ec1'], $c['ebd1'], $uid, $c['eno1']);
   $eid = db_last_insert_id('ext_exam_record', 'ext_exam_record_id');
   for ($i = 1; $i <= 9; $i++) {
      $s = "s1$i";
      $g = "g1$i";
      if ($c[$s])
         db_query("insert into {ext_exam_detail}  set ext_exam_record_id=%d,subject_id='%s',grade_id='%s'", $eid, $c[$s], $c[$g]);
   }
   if ($c['nos'] == 2) {
      $ed1 = $c['edate2']['year'] .'-'. $c['edate2']['month'] .'-'. $c['edate2']['day'];
      db_query("insert into {ext_exam_record}  set exam_date='%s',exam_center_name='%s',exam_body='%s',exam_student_id='%s',exam_number='%s'"
, $ed1, $c['ec2'], $c['ebd2'], $uid, $c['eno2']);
      $eid = db_last_insert_id('ext_exam_record', 'ext_exam_record_id');
      for ($i = 1; $i <= 9; $i++) {
         $s = "s1$i";
         $g = "g1$i";
         if ($c[$s])
           db_query("insert into {ext_exam_detail} set ext_exam_record_id=%d,subject_id='%s',grade_id='%s'", $eid , $c[$s], $c[$g]);
      }
   }
}

function _student_gr() {
  static $titles;
  if (!$titles) {
     $titles[] = 'Select';
     $r = db_query("select * from  {olevel_grades} order by grade_name");
     while ($f = db_fetch_object($r))
       $titles[$f->grade_id] = $f->grade_name;
  }
  return  $titles;
}

function _student_sub() {

   static $titles;
   if (!$titles) {
      $titles[] = 'Select';
      $r = db_query("select * from  {ext_exam_subject} order by subject_name");
      while ($f = db_fetch_object($r))
       $titles[$f->subject_id]=$f->subject_name;
   }
   return  $titles;
}

function _student_bod() {

  static $titles;
  if (!$titles) {
    $titles[] = 'Select';
    $r = db_query("select * from {ext_exam_body}  order by exam_body_name");
    while ($f = db_fetch_object($r))
      $titles[$f->exam_body_id] = $f->exam_body_name;
    }
   return  $titles;
}

function _student_rel() {

  static $titles;
  if (!$titles) {
     $r = db_query("select * from {kin_relationship}  order by relation");
     while ($f = db_fetch_object($r))
        $titles[trim($f->relation)]=trim($f->relation);
  }
  return  $titles;
}

function _student_col(){

  static $titles;
  if(!$titles) {
    $titles[0]="";
    $r = db_query("select * from {college}  order by college_name");
    while ($f = db_fetch_object($r))
      $titles[$f->college_id]=$f->college_name;
  }
  return  $titles;
}

function _student_religion() {
 static $titles;
 if (!$titles) {
    $titles = array();
    $titles[] = '';
    $r = db_query("select * from {religion} ");
    while ($f = db_fetch_object($r)) {
      $titles[$f->relegion_id] = $f->religion_name;
    }
    ///$titles= array('christianity'=>'Christianity','islam'=>'Islam','traditional'=>'Traditional','other'=>'Other');
 }
 return  $titles;
}

function _student_dep(){
 static $titles;
 if(!$titles){
  $titles[0]="";
  $r=db_query("select * from department  order by department_name");
  while($f=db_fetch_object($r))
  $titles[$f->department_id]=$f->department_name;
 }
 return  $titles;

}
function _student_prg(){
  static $titles;
 if(!$titles){
  $titles[0]="";
  $r=db_query("select * from programme order by programme_name");
  while($f=db_fetch_object($r))
  $titles[$f->programme_id]=$f->programme_name;
 }
 return  $titles;

}

function _student_mode_of_entries($field=null){


  $r=db_query("select * from mode_of_entry ");
  while($f=db_fetch_object($r)){
   if(isset($field) && $field !=""){
    $titles[$f->id]=$f->$field;
   } else {
    $titles[$f->id]=$f->name;
   }

  }

 return  $titles;

}

function _student_add_course(){
  $x = $_POST['dep2'];
  $nm = 'course2';
  $p = $_POST['div'];
  if ($p == 'div-id-co1') {
    $nm = 'course1';
  }else if ( $p == 'div-id-co2') {
    $nm = 'course2';
  }
  if (!$x) {
    print drupal_to_js(array('data' => '', 'status' => FALSE));
  }
  $f = array();
  $r = db_query("select * from programme where department_id=%d" , $x);
  while ($s = db_fetch_object($r))
    $f[$s->programme_id] = $s->programme_name;
  $form = array(
    '#type' => 'select',
    '#title' => 'COURSE',
    '#options' => $f,
    '#name' => $nm
   );

  $output = _student_ahah_render($form , $nm);
  print drupal_to_js(array('data' => $output, 'status' => TRUE));
  exit();
}

function _student_get_subrel(){
  $x = (int)$_POST['rel'];
 //$r=db_query("select * from religion where religion_id=%d",$x);
 //$f=db_fetch_object($r);
  $r = db_query("select * from religion_detail where religion_id=%d" , $x);
  $rows = array();
  while ($f = db_fetch_object($r)) {
    $rows[$f->religion_id_detail]=$f->religion_detail_name;
  }
 if (!count($rows)) {
   $form = array('#type' => 'textfield', '#description' => 'Give Details');
 }
 else{

 $form = array(
    '#type' => 'select',
    '#title' => 'Denomination',
    '#options' => $rows,
  );

 }
  $output = _student_ahah_render($form, 'subrel');
  print drupal_to_js(array('data' => $output, 'status' => TRUE));
  exit();

}

function _student_add_dep() {
  $x = arg(2);
//$x=$_POST[dep1];
 $n = 'course1';
 $div = 'div-id-co1';
 $d = (int)$_POST[$x];
 $f = array();
 $r = db_query("select * from programme where department_id=%d" , $d);
 $f[] = '';
 while($s = db_fetch_object($r))
   $f[$s->programme_id] = $s->programme_name;
 $form = array(
    '#type' => 'select',
    '#title' => 'Course',
    '#options' => $f
  );
 $output = _student_ahah_render($form, $n);
  print drupal_to_js(array('data' => $output, 'status' => TRUE));
  exit();
}

function add_pics($photo) {

 $query = "update admitted_student set signature_pic_id = '%s' , pic_id='%s' where student_id='%s'";
 //echo  sprintf($query,$photo['signature'],$photo['pic'],$_SESSION['student']['data']->student_id); die;
 db_query($query, $photo['signature'], $photo['pic'], $_SESSION['student']['data']->student_id);

}

function _student_add_lga() {
  $x = arg(2);
  if ($x == 'accomodation') {
   $title = 'Select Hostel';
   $accomodation_type = (int)$_REQUEST['accomodation_type'];
   $r = db_query("select * from accomodation_hostels where accomodation_type_id='". $accomodation_type ."' and gender = '". $_SESSION['student']['data']->gender ."'");
   $f = array();
   $f[] = 'Select Hostel';
   while($s=db_fetch_object($r)){
     $f[$s->id]=$s->name;
   }
   $title = "Select Hostel";
   $name='hostel';
   $form = array('#id'=>'edit-hostel-1','#type'=>'select','#default_value'=>0,'#options'=>$f,'#title'=>'Select Hostel'
   ,'#ahah1'=>array('event'=>'change','wrapper'=>'message_id','path'=>'student/accomodation/validate','method'=>'html'));
   ob_start(); ?>
 <script type="text/javascript">

<!--//--><![CDATA[//><!--
jQuery.extend(Drupal.settings, { "basePath": "/veritas/", "ahah": { "": { "url": "/veritas/student/accomodation/validate", "event": "change", "wrapper": "message_id", "selector": "#edit-hostel-1", "effect": "slide", "method": "replace", "progress": { "type": "throbber" } }, "edit-accomodation-type": { "url": "/veritas/student/ajaxlga/accomodation", "event": "change", "keypress": null, "wrapper": "hostel_id", "selector": "#edit-accomodation-type", "effect": "none", "method": "html", "progress": { "type": "throbber" }, "button": false }, "edit-hostel": { "url": "/veritas/student/accomodation/validate", "event": "change", "keypress": null, "wrapper": "message_id", "selector": "#edit-hostel", "effect": "none", "method": "html", "progress": { "type": "throbber" }, "button": false } } });
//--><!]]>

</script>
<?php
    $data = ob_get_clean();
  }
  if ($x == 'department') {
    $title = 'Select Department';
    $college_id = (int)$_REQUEST['college'];
    $r = db_query("select * from {department} where college_id='". $college_id ."'");
    $f = array();
    $f[] = 'Select Department';
    while ($s = db_fetch_object($r)) {
      $f[$s->department_id] = $s->department_name;
    }
    $title = "Select Department";
    $name = 'department_id';
    $form = array('#id' => 'edit-department-id-1', '#type' => 'select', '#default_value' =>  0, '#options' => $f, '#title' => 'Select Department');
  }
  if ($x == 'state') {
    $state = (int)$_POST['state'];
    $name = 'lga';
    $title = 'LGA';
  }
  else if($x == 'astate') {
    $state = (int)$_POST['astate'];
    $name = 'alga';
    $title = 'LGA';
    $form = array(
      '#type' => 'select',
      '#title' => $title,
      '#options' => $f
    );
  }
  elseif ($x == 'state')
   $title = 'LGA';
  if ($x != 'accomodation' && $x != 'department') {
    $f = array();
    $f[] = '';
    $r = db_query("select * from lga where lga_rel=%d", $state);
    while ($s = db_fetch_object($r)) {
      $f[$s->lga_id] = $s->lga_name;
    }
    $form = array(
      '#type' => 'select',
      '#title' => $title,
      '#options' => $f
    );
  }
  // all you have to worry about is the new form field that will be inserted via #ahah
  ///  drupal_alter_form();
  // ahah_render is where the magic happens.
  // 'the value of this field will show up as $form_value['user_problem']
  $output = _student_ahah_render($form, $name);
   print drupal_to_js(array('data' => $output, 'status' => true));
  //print_R($form);
  exit();
}

function _student_accomodation_validate() {
   $values = $_POST;

    if($values['accomodation_type'] == 0 || $values['accomodation_type']==''){
   form_set_error('accomodation_type','Accomodation type is required');
  }

  if($values['hostel'] == 0 || $values['hostel']==''){
   form_set_error('hostel','Hostel is required');
  } else {

  $query = "select count(*) as bookings from admitted_student_accomodation where hostel_id='".$values['hostel']."'";

  $result = db_query($query);
  $bookings = db_result($result);
  $query = "select  space from accomodation_hostels where id ='".$values['hostel']."'";

  $result = db_query($query);
  $spaces = db_result($result);
  //$message .= "<br>space ".$spaces;
  //$message .= "<br> booking ".$bookings;
  if($bookings >= $spaces){

   //form_set_error('accomodation_type','No space avaliable');

   $message .= "<font color='red'>No spaces available select different accommodation</font>";

  } else {



   $message .= "<font color='red'>Your room has been reserved.</font>";

   $disable = "<script>
       $('#edit-next').attr('disabled',false);
       </script>
   ";

   $message .= $disable;

  }
  }

 $form = array('#type'=>'item','#prefix'=>'','#suffix'=>'','#title'=>'','#value'=>$message);
 $name='mark';
  $output = _student_ahah_render($form, $name);
  print drupal_to_js(array('data' => $output, 'status' => true));
  exit();

}
/*
  This function is largely based on the poll module, its been simplified for reuse.
  $fields is the specific form elements you want to attach via ahah,
  $name is the form fields array key... e.g. the name for $form['title'] is "title"
*/
function _student_ahah_render($fields, $name) {
 
  
  drupal_alter('form', $fields, array(), 'student_registration_form');

  $form_state = array('submitted' => FALSE,'#values'=>$_POST);
  $form_build_id = $_POST['form_build_id'];
  // Add the new element to the stored form. Without adding the element to the
  // form, Drupal is not aware of this new elements existence and will not
  // process it. We retreive the cached form, add the element, and resave.
  $form = form_get_cache($form_build_id, $form_state);
  if($form[$name]['#required'] == true){
    $fields['#required'] =  true;
  }
  $form[$name] = $fields;
  form_set_cache($form_build_id, $form, $form_state);
  $form += array(
    '#post' => $_POST,
    '#programmed' => FALSE,
  );
   $form_state = array('submitted' => FALSE);

  // Rebuild the form.
  $form = form_builder($_POST['form_id'], $form, $form_state);

  // Render the new output.
  $new_form = $form[$name];
  return drupal_render($new_form);
}

function file_save_upload_name($source, $validators = array('file_validate_extensions'=>array('jpeg','jpg','gif','png')), $dest = FALSE, $replace = FILE_EXISTS_RENAME,$filename=null) {
  global $user;
  static $upload_cache;

  // Add in our check of the the file name length.
  $validators['file_validate_name_length'] = array();

  // Return cached objects without processing since the file will have
  // already been processed and the paths in _FILES will be invalid.
  if (isset($upload_cache[$source])) {
    return $upload_cache[$source];
  }

  // If a file was uploaded, process it.
  if (isset($_FILES['files']) && $_FILES['files']['name'][$source] && is_uploaded_file($_FILES['files']['tmp_name'][$source])) {
    // Check for file upload errors and return FALSE if a
    // lower level system error occurred.
    switch ($_FILES['files']['error'][$source]) {
      // @see http://php.net/manual/en/features.file-upload.errors.php
      case UPLOAD_ERR_OK:
        break;

      case UPLOAD_ERR_INI_SIZE:
      case UPLOAD_ERR_FORM_SIZE:
        drupal_set_message(t('The file %file could not be saved, because it exceeds %maxsize, the maximum allowed size for uploads.', array('%file' => $source, '%maxsize' => format_size(file_upload_max_size()))), 'error');
        return 0;

      case UPLOAD_ERR_PARTIAL:
      case UPLOAD_ERR_NO_FILE:
        drupal_set_message(t('The file %file could not be saved, because the upload did not complete.', array('%file' => $source)), 'error');
        return 0;

        // Unknown error
      default:
        drupal_set_message(t('The file %file could not be saved. An unknown error has occurred.', array('%file' => $source)), 'error');
        return 0;
    }

    // Build the list of non-munged extensions.
    // @todo: this should not be here. we need to figure out the right place.
    $extensions = '';
    foreach ($user->roles as $rid => $name) {
      $extensions .= ' '. variable_get("upload_extensions_$rid",
      variable_get('upload_extensions_default', 'jpg jpeg gif png txt html doc xls pdf ppt pps odt ods odp'));
    }

    // Begin building file object.
    $file = new stdClass();

    if (!$filename) {

      $filename = trim(basename($_FILES['files']['name'][$source]), '.');

    } else {

      $filename_parts = explode('.', basename($_FILES['files']['name'][$source]));
      $new_filename = array_shift($filename_parts); // Remove file basename.
      $final_extension = array_pop($filename_parts); // Remove final extension.
      $filename .= ".".$final_extension;
    }

    $file->filename = file_munge_filename($filename, $extensions,false);
    $file->filepath = $_FILES['files']['tmp_name'][$source];
    $file->filemime = file_get_mimetype($file->filename);

    // Rename potentially executable files, to help prevent exploits.
    if (preg_match('/\.(php|pl|py|cgi|asp|js)$/i', $file->filename) && (substr($file->filename, -4) != '.txt')) {
      $file->filemime = 'text/plain';
      $file->filepath .= '.txt';
      $file->filename .= '.txt';
    }

    // If the destination is not provided, or is not writable, then use the
    // temporary directory.
    if (empty($dest) || file_check_path($dest) === FALSE) {
      $dest = file_directory_temp();
    }

    $file->source = $source;
    $file->destination = file_destination(file_create_path($dest .'/'. $file->filename), $replace);
    $file->filesize = $_FILES['files']['size'][$source];

    // Call the validation functions.
    $errors = array();
    foreach ($validators as $function => $args) {
      array_unshift($args, $file);
      $errors = array_merge($errors, call_user_func_array($function, $args));
    }

    // Check for validation errors.
    if (!empty($errors)) {
      $message = t('The selected file %name could not be uploaded.', array('%name' => $file->filename));
      if (count($errors) > 1) {
        $message .= '<ul><li>'. implode('</li><li>', $errors) .'</li></ul>';
      }
      else {
        $message .= ' '. array_pop($errors);
      }
      form_set_error($source, $message);
      return 0;
    }

    // Move uploaded files from PHP's upload_tmp_dir to Drupal's temporary directory.
    // This overcomes open_basedir restrictions for future file operations.
    $file->filepath = $file->destination;
    if (!move_uploaded_file($_FILES['files']['tmp_name'][$source], $file->filepath)) {
      form_set_error($source, t('File upload error. Could not move uploaded file.'));
      watchdog('file', 'Upload error. Could not move uploaded file %file to destination %destination.', array('%file' => $file->filename, '%destination' => $file->filepath));
      return 0;
    }

    // If we made it this far it's safe to record this file in the database.
    $file->uid = $user->uid;
    $file->status = FILE_STATUS_TEMPORARY;
    $file->timestamp = time();
    drupal_write_record('files', $file);

    // Add file to the cache.
    $upload_cache[$source] = $file;
    return $file;
  }
  return 0;
}

function student_user($type, &$edit, &$user, $category = NULL){

  switch($type){
    case 'login':
      $query ="select * from admitted_student where user_id = ".$user->uid;
      $result = db_query($query);
      if ($data = db_fetch_object($result)) {
        unset($_SESSION['student']);
        unset($_SESSION['veritas']);
        unset($_SESSION['staff']);
        $_SESSION['student']['id'] = $data->student_id;
        $_SESSION['student']['data'] = $data;
      }
      break;
  }
  //die;
}
?>
